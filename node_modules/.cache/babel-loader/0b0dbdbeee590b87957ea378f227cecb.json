{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { updateMonster } from './monster';\nimport { logCombat } from './combat'; // sounds clips\n\nimport cardSuccess from '../sound_clips/play_card_zapsplat_foley.mp3';\nimport cardError from '../sound_clips/error_sound.mp3'; // Alter Health, Energy & Defense Actions:\n\nexport const updatePlayer = createAction('player/UPDATE_PLAYER'); // Deck Actions:\n\nexport const setDeck = createAction('player/SET_DECK');\nexport const drawCard = createAction('player/DRAW_CARD');\nexport const playCard = createAction('player/PLAY_CARD');\nexport const playIndexedCard = createAction('player/PLAY_INDEXED_CARD');\nexport const discardHand = createAction('player/DISCARD_HAND');\nexport const voidCard = createAction('player/VOID_CARD');\nexport const shuffleDeck = createAction('player/SHUFFLE_DECK');\nexport const resetDeck = createAction('player/RESET_DECK'); // Hand actions\n\nexport const drawHand = createAction('player/DRAW_HAND'); // deck altering\n\nexport const addCard = createAction('player/ADD_CARD');\nexport const addCardDiscard = createAction('player/ADD_CARD_DISCARD'); // Ailgment\n\nexport const removeAilgments = createAction('player/REMOVE_AILGMENTS');\nexport const addAilgments = createAction('player/ADD_AILGMENTS'); // Curses\n\nexport const removeCurses = createAction('player/REMOVE_CURSES'); // Afflictions\n\nexport const removeDeckAfflictions = createAction('player/REMOVE_DECK_AFFLICTIONS');\nconst initialState = {\n  deck: [],\n  hand: [],\n  discard: [],\n  voidDeck: []\n};\n\nfunction shuffle(deck) {\n  var j, x, i;\n\n  for (i = deck.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = deck[i];\n    deck[i] = deck[j];\n    deck[j] = x;\n  }\n\n  return deck;\n}\n\nconst reduceResetDeck = _ref => {\n  let {\n    deck,\n    hand,\n    discard,\n    voidDeck,\n    ...rest\n  } = _ref;\n  let resetDeck = [...deck, ...hand, ...discard, ...voidDeck];\n  console.log('reset deck:', resetDeck);\n  return { ...rest,\n    deck: resetDeck,\n    hand: [],\n    voidDeck: [],\n    discard: []\n  };\n};\n\nconst reduceDrawCard = _ref2 => {\n  let {\n    discard,\n    deck,\n    hand,\n    ...rest\n  } = _ref2;\n\n  if (deck.length == 0) {\n    if (discard.length == 0) {\n      return { ...rest,\n        discard,\n        deck,\n        hand\n      };\n    } else {\n      const shuffledDiscard = shuffle(discard);\n      const grabCard = shuffledDiscard[shuffledDiscard.length - 1];\n      const newDeck = shuffledDiscard.slice(0, shuffledDiscard.length - 1);\n      const newHand = [...hand, grabCard];\n      return { ...rest,\n        hand: newHand,\n        deck: newDeck,\n        discard: []\n      };\n    }\n  } else {\n    return { ...rest,\n      hand: [...hand, deck[deck.length - 1]],\n      deck: deck.slice(0, deck.length - 1),\n      discard\n    };\n  }\n};\n\nconst reducePlayCard = _ref3 => {\n  let {\n    discard,\n    hand,\n    ...rest\n  } = _ref3;\n  const emptyHand = hand.length < 1;\n\n  if (!emptyHand) {\n    const newHand = hand.slice(0, hand.length - 1);\n    const newDiscard = [...discard, hand[hand.length - 1]];\n    return { ...rest,\n      hand: newHand,\n      discard: newDiscard\n    };\n  } else {\n    return { ...rest,\n      hand,\n      discard\n    };\n  }\n};\n\nconst reducePlayIndexedCard = (_ref4, _ref5) => {\n  let {\n    voidDeck,\n    discard,\n    hand,\n    ...rest\n  } = _ref4;\n  let {\n    payload\n  } = _ref5;\n  const grabCard = hand[payload];\n  hand.splice(payload, 1);\n\n  if (grabCard.exhaust) {\n    return { ...rest,\n      voidDeck: [...voidDeck, grabCard],\n      hand: hand,\n      discard: discard\n    };\n  } else {\n    return { ...rest,\n      voidDeck: voidDeck,\n      hand: hand,\n      discard: [...discard, grabCard]\n    };\n  }\n};\n\nconst reduceDiscardHand = _ref6 => {\n  let {\n    discard,\n    hand,\n    ...rest\n  } = _ref6;\n  const emptyHand = hand.length < 1;\n\n  if (!emptyHand) {\n    const newHand = [];\n    const newDiscard = [...discard, ...hand];\n    return { ...rest,\n      hand: newHand,\n      discard: newDiscard\n    };\n  } else {\n    return { ...rest,\n      hand,\n      discard\n    };\n  }\n};\n\nconst reduceAddCard = (_ref7, _ref8) => {\n  let {\n    deck,\n    ...rest\n  } = _ref7;\n  let {\n    payload\n  } = _ref8;\n  const newDeck = [...deck, payload];\n  return { ...rest,\n    deck: newDeck\n  };\n};\n\nconst reduceAddCardDiscard = (_ref9, _ref10) => {\n  let {\n    discard,\n    ...rest\n  } = _ref9;\n  let {\n    payload\n  } = _ref10;\n  const newDiscard = [...discard, payload];\n  return { ...rest,\n    discard: newDiscard\n  };\n};\n\nconst reduceAddAilgments = (_ref11, _ref12) => {\n  let {\n    offenseHeroAilgments,\n    offenseHeroAilgmentsDuration,\n    utilityHeroAilgments,\n    utilityHeroAilgmentsDuration,\n    defenseHeroAilgments,\n    defenseHeroAilgmentsDuration,\n    ...rest\n  } = _ref11;\n  let {\n    payload\n  } = _ref12;\n  console.log(\"Ailgments Payload:\", payload);\n  let indexOfStun = -1;\n\n  switch (payload.target) {\n    case 'mage':\n      indexOfStun = utilityHeroAilgments.findIndex(aligment => aligment == \"stun\");\n\n      if (indexOfStun != -1) {\n        utilityHeroAilgmentsDuration[indexOfStun] = utilityHeroAilgmentsDuration[indexOfStun] + payload.duration;\n      } else {\n        utilityHeroAilgments = [...utilityHeroAilgments, payload.effect];\n        utilityHeroAilgmentsDuration = [...utilityHeroAilgmentsDuration, payload.duration];\n      }\n\n      break;\n\n    case 'sword':\n      indexOfStun = offenseHeroAilgments.findIndex(aligment => aligment == \"stun\");\n\n      if (indexOfStun != -1) {\n        offenseHeroAilgmentsDuration[indexOfStun] = offenseHeroAilgmentsDuration[indexOfStun] + payload.duration;\n      } else {\n        offenseHeroAilgments = [...offenseHeroAilgments, payload.effect];\n        offenseHeroAilgmentsDuration = [...offenseHeroAilgmentsDuration, payload.duration];\n      }\n\n      break;\n\n    case 'shield':\n      indexOfStun = defenseHeroAilgments.findIndex(aligment => aligment == \"stun\");\n\n      if (indexOfStun != -1) {\n        defenseHeroAilgmentsDuration[indexOfStun] = defenseHeroAilgmentsDuration[indexOfStun] + payload.duration;\n      } else {\n        defenseHeroAilgments = [...defenseHeroAilgments, payload.effect];\n        defenseHeroAilgmentsDuration = [...defenseHeroAilgmentsDuration, payload.duration];\n      }\n\n      break;\n\n    default:\n      console.log('ERROR default::', payload.target);\n  }\n\n  return { ...rest,\n    offenseHeroAilgments: offenseHeroAilgments,\n    offenseHeroAilgmentsDuration: offenseHeroAilgmentsDuration,\n    utilityHeroAilgments: utilityHeroAilgments,\n    utilityHeroAilgmentsDuration: utilityHeroAilgmentsDuration,\n    defenseHeroAilgments: defenseHeroAilgments,\n    defenseHeroAilgmentsDuration: defenseHeroAilgmentsDuration\n  };\n};\n\nconst reduceRemoveAilgments = _ref13 => {\n  let {\n    offenseHeroAilgments,\n    offenseHeroAilgmentsDuration,\n    utilityHeroAilgments,\n    utilityHeroAilgmentsDuration,\n    defenseHeroAilgments,\n    defenseHeroAilgmentsDuration,\n    ...rest\n  } = _ref13;\n  return { ...rest,\n    offenseHeroAilgments: [],\n    offenseHeroAilgmentsDuration: [],\n    utilityHeroAilgments: [],\n    utilityHeroAilgmentsDuration: [],\n    defenseHeroAilgments: [],\n    defenseHeroAilgmentsDuration: []\n  };\n};\n\nconst reduceRemoveDeckAfflictions = _ref14 => {\n  let {\n    deck,\n    hand,\n    discard,\n    ...rest\n  } = _ref14;\n  let newDeck = deck.filter(card => {\n    if (!(card.type === 'affliction')) {\n      return card;\n    }\n  });\n  let newHand = hand.filter(card => {\n    if (!(card.type === 'affliction')) {\n      return card;\n    }\n  });\n  let newDiscard = discard.filter(card => {\n    if (!(card.type === 'affliction')) {\n      return card;\n    }\n  });\n  return { ...rest,\n    deck: newDeck,\n    hand: newHand,\n    discard: newDiscard\n  };\n};\n\nconst reduceRemoveCurses = _ref15 => {\n  let {\n    deck,\n    ...rest\n  } = _ref15;\n  let newDeck = deck.filter(card => {\n    if (!(card.type == 'curse')) {\n      return card;\n    }\n  });\n  return { ...rest,\n    deck: newDeck\n  };\n};\n\nexport default handleActions({\n  [drawHand]: state => ({ ...state,\n    deck: state.deck.slice(0, state.deck.length - 5),\n    hand: [...state.hand, ...state.deck.slice(-5)]\n  }),\n  [shuffleDeck]: state => ({ ...state,\n    deck: shuffle(state.deck)\n  }),\n  [updatePlayer]: (state, action) => ({ ...state,\n    ...action.payload\n  }),\n  [setDeck]: (state, action) => ({ ...state,\n    deck: action.payload\n  }),\n  [resetDeck]: reduceResetDeck,\n  [removeAilgments]: reduceRemoveAilgments,\n  [addAilgments]: reduceAddAilgments,\n  [removeDeckAfflictions]: reduceRemoveDeckAfflictions,\n  [removeCurses]: reduceRemoveCurses,\n  [drawCard]: reduceDrawCard,\n  [playCard]: reducePlayCard,\n  [playIndexedCard]: reducePlayIndexedCard,\n  [discardHand]: reduceDiscardHand,\n  [addCard]: reduceAddCard,\n  [addCardDiscard]: reduceAddCardDiscard,\n  [voidCard]: (state, action) => ({ ...state,\n    hand: state.hand.slice(action.payload, 1),\n    voidPile: [...state.void, state.hand.slice(action.payload, 1)]\n  })\n}, initialState);\nconst selectPlayer = createSelector(state => state.player, player => player);\nexport const usePlayer = () => {\n  _s();\n\n  return useSelector(selectPlayer);\n};\n/* requiredHero :\n// a - any hero standing\n// o - off needed\n// u - util needed\n// d - def needed\n// do - def & off needed\n// ud - util & def needed\n// ou - off & util needed\n// e - every hero needed\n*/\n\n_s(usePlayer, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nfunction checkStanding(state, requiredHeros) {\n  const offHeroStanding = state.player.offenseHeroStatus === 'standing' && !state.player.offenseHeroAilgments.includes('stun') ? true : false;\n  const defHeroStanding = state.player.defenseHeroStatus === 'standing' && !state.player.defenseHeroAilgments.includes('stun') ? true : false;\n  const utilHeroStanding = state.player.utilityHeroStatus === 'standing' && !state.player.utilityHeroAilgments.includes('stun') ? true : false;\n\n  switch (requiredHeros) {\n    case 'a':\n      return offHeroStanding || defHeroStanding || utilHeroStanding;\n\n    case 'o':\n      return offHeroStanding;\n\n    case 'u':\n      return utilHeroStanding;\n\n    case 'd':\n      return defHeroStanding;\n\n    case 'do':\n      return defHeroStanding && offHeroStanding;\n\n    case 'du':\n      return defHeroStanding && utilHeroStanding;\n\n    case 'ou':\n      return offHeroStanding && utilHeroStanding;\n\n    case 'e':\n      return offHeroStanding && defHeroStanding && utilHeroStanding;\n  }\n} // Animations START:\n\n\nfunction heroStrikeAnimation(heroElement) {\n  let transitionTime = 500;\n  heroElement.animate([{\n    transform: 'translate(0px,0px)'\n  }, {\n    transform: 'translate(95px, 0px)'\n  }, {\n    transform: 'translate(155px, 0px)'\n  }, {\n    transform: 'translate(-1px, 0px)'\n  }, {\n    transform: 'translate(0, 0px)'\n  }], {\n    duration: transitionTime,\n    iterations: 1\n  });\n}\n\nfunction damageFlash(bodyElement) {\n  let transitionTime = 500;\n  bodyElement.animate([{\n    opacity: 1\n  }, {\n    opacity: 0\n  }, {\n    opacity: .75\n  }, {\n    opacity: .5\n  }, {\n    opacity: 0\n  }, {\n    opacity: .75\n  }, {\n    opacity: 1\n  }], {\n    duration: transitionTime,\n    iterations: 1\n  });\n}\n\nfunction shakeHero(state, requiredHero, mage, koMage, sword, shield) {\n  const offHeroStanding = state.player.offenseHeroStatus === 'standing' && !state.player.offenseHeroAilgments.includes('stun') ? true : false;\n  const defHeroStanding = state.player.defenseHeroStatus === 'standing' && !state.player.defenseHeroAilgments.includes('stun') ? true : false;\n  const utilHeroStanding = state.player.utilityHeroStatus === 'standing' && !state.player.utilityHeroAilgments.includes('stun') ? true : false;\n\n  switch (requiredHero) {\n    case 'o':\n      leftRightShake(sword);\n      break;\n\n    case 'u':\n      leftRightShake(mage);\n      leftRightShake(koMage);\n      break;\n\n    case 'd':\n      leftRightShake(shield);\n      break;\n\n    case 'do':\n      if (!defHeroStanding) {\n        leftRightShake(shield);\n      }\n\n      if (!offHeroStanding) {\n        leftRightShake(sword);\n      }\n\n      break;\n\n    case 'du':\n      if (!defHeroStanding) {\n        leftRightShake(shield);\n      }\n\n      if (!utilHeroStanding) {\n        leftRightShake(mage);\n        leftRightShake(koMage);\n      }\n\n      break;\n\n    case 'ou':\n      if (!offHeroStanding) {\n        leftRightShake(sword);\n      }\n\n      if (!utilHeroStanding) {\n        leftRightShake(mage);\n        leftRightShake(koMage);\n      }\n\n      break;\n\n    case 'e':\n      if (!offHeroStanding) {\n        leftRightShake(sword);\n      }\n\n      if (!defHeroStanding) {\n        leftRightShake(shield);\n      }\n\n      if (!utilHeroStanding) {\n        leftRightShake(mage);\n        leftRightShake(koMage);\n      }\n\n      break;\n  }\n}\n\nfunction leftRightShake(element) {\n  let transitionTime = 250;\n  element.animate([{\n    transform: 'translate(0px,0px)'\n  }, {\n    transform: 'translate(10px, 0px)'\n  }, {\n    transform: 'translate(-10px, 0px)'\n  }, {\n    transform: 'translate(0, 0px)'\n  }], {\n    duration: transitionTime,\n    iterations: 1\n  });\n} // Animations END\n\n\nfunction moveHero(requiredHeros, mageBody, shieldBody, swordBody) {\n  switch (requiredHeros) {\n    case 'a':\n      let choice = Math.floor(Math.random() * 3);\n\n      if (choice === 1) {\n        heroStrikeAnimation(swordBody);\n      } else if (choice === 2) {\n        heroStrikeAnimation(shieldBody);\n      } else {\n        heroStrikeAnimation(mageBody);\n      }\n\n      break;\n\n    case 'o':\n      heroStrikeAnimation(swordBody);\n      break;\n\n    case 'u':\n      heroStrikeAnimation(mageBody);\n      break;\n\n    case 'd':\n      heroStrikeAnimation(shieldBody);\n      break;\n\n    case 'do':\n      heroStrikeAnimation(swordBody);\n      heroStrikeAnimation(shieldBody);\n      break;\n\n    case 'du':\n      heroStrikeAnimation(shieldBody);\n      heroStrikeAnimation(mageBody);\n      break;\n\n    case 'ou':\n      heroStrikeAnimation(swordBody);\n      heroStrikeAnimation(mageBody);\n      break;\n\n    case 'e':\n      heroStrikeAnimation(swordBody);\n      heroStrikeAnimation(shieldBody);\n      heroStrikeAnimation(mageBody);\n      break;\n  }\n} // Async Actions\n\n\nexport const applyCard = cardIndex => (dispatch, getState) => {\n  const state = getState();\n  const card = state.player.hand[cardIndex];\n  const energyCost = card.energy;\n  const requiredHero = card.requiredHero;\n  const standing = checkStanding(state, requiredHero);\n  const foeDefense = state.monster.defense;\n  let cardSounds = document.createElement('audio');\n  let mageBody = document.getElementById('mageBody');\n  let koMageBody = document.getElementById('koMageBody');\n  let shieldBody = document.getElementById('shieldBody');\n  let swordBody = document.getElementById('swordBody');\n  let energyText = document.getElementById('heroEnergyText');\n  let aCursedCard = card.type === 'curse' ? true : false;\n\n  if (energyCost <= state.player.energy && !aCursedCard) {\n    cardSounds.src = cardSuccess;\n    cardSounds.play();\n\n    if (standing) {\n      moveHero(card.requiredHero, mageBody, shieldBody, swordBody);\n      const newEnergy = state.player.energy - energyCost;\n\n      for (let i = 0; i < card.action.target.length; i++) {\n        if (card.action.target[i] == \"foe\") {\n          if (card.action.effect[i] == 'damage') {\n            damageFlash(document.getElementById('monsterOuterContainer'));\n            const trample = foeDefense - card.action.power[i];\n\n            if (trample < 0) {\n              const newFoeHealth = parseInt(state.monster.health) + parseInt(trample);\n              dispatch(updateMonster({\n                health: newFoeHealth,\n                defense: 0\n              }));\n              dispatch(logCombat({\n                origin: 'player',\n                description: 'Player used: ' + card.name + ' dealing ' + -1 * trample + ' damage.'\n              }));\n            } else {\n              const newFoeDefense = trample;\n              dispatch(updateMonster({\n                defense: newFoeDefense\n              }));\n              dispatch(logCombat({\n                origin: 'player',\n                description: 'Player used: ' + card.name + ' dealing 0 damage.'\n              }));\n            }\n\n            dispatch(updatePlayer({\n              energy: newEnergy\n            }));\n          } else if (card.action.effect[i] == 'stun') {\n            state.monster.aligment.push('stun');\n            state.monster.aligmentDuration.push(card.action.power[i]);\n            dispatch(updatePlayer({\n              energy: newEnergy\n            }));\n          } else if (card.action.effect[i] == 'defenseTotal') {\n            const trample = foeDefense - state.player.defense;\n\n            if (trample < 0) {\n              const newFoeHealth = parseInt(state.monster.health) + parseInt(trample);\n              dispatch(updateMonster({\n                health: newFoeHealth,\n                defense: 0\n              }));\n              dispatch(logCombat({\n                origin: 'player',\n                description: 'Player used: ' + card.name + ' dealing ' + -1 * trample + ' damage.'\n              }));\n            } else {\n              const newFoeDefense = trample;\n              dispatch(updateMonster({\n                defense: newFoeDefense\n              }));\n              dispatch(logCombat({\n                origin: 'player',\n                description: 'Player used: ' + card.name + ' dealing 0 damage.'\n              }));\n            }\n\n            dispatch(updatePlayer({\n              energy: newEnergy\n            }));\n          }\n        } else if (card.action.target[i] == \"player\") {\n          if (card.action.effect[i] == \"heal\") {\n            const newPlayerHealth = parseInt(state.player.health) + parseInt(card.action.power[i]) > parseInt(state.player.maxHealth) ? parseInt(state.player.maxHealth) : parseInt(state.player.health) + parseInt(card.action.power[i]);\n            dispatch(updatePlayer({\n              health: newPlayerHealth,\n              energy: newEnergy\n            }));\n            dispatch(logCombat({\n              origin: 'player',\n              description: 'Player used: ' + card.name + ' healing ' + card.action.power[i] + ' party health'\n            }));\n          } else if (card.action.effect[i] == \"mend\") {\n            dispatch(removeDeckAfflictions());\n          } else if (card.action.effect[i] == \"defense\") {\n            const defense = card.action.power[i];\n            const newPlayerDefense = parseInt(state.player.defense) + parseInt(defense);\n            dispatch(updatePlayer({\n              defense: newPlayerDefense,\n              energy: newEnergy\n            }));\n            dispatch(logCombat({\n              origin: 'player',\n              description: 'Player used: ' + card.name + ' gaining ' + defense + ' party defense'\n            }));\n          } else if (card.action.effect[i] == 'delayUtility') {\n            state.player.utilityHeroAilgments.push('stun');\n            state.player.utilityHeroAilgmentsDuration.push(card.action.power[i]);\n            dispatch(updatePlayer({\n              energy: newEnergy\n            }));\n          } else if (card.action.effect[i] == 'delayDefense') {\n            state.player.defenseHeroAilgments.push('stun');\n            state.player.defenseHeroAilgmentsDuration.push(card.action.power[i]);\n            dispatch(updatePlayer({\n              energy: newEnergy\n            }));\n          } else if (card.action.effect[i] == 'delayOffense') {\n            state.player.offenseHeroAilgments.push('stun');\n            state.player.offenseHeroAilgmentsDuration.push(card.action.power[i]);\n            dispatch(updatePlayer({\n              energy: newEnergy\n            }));\n          } else if (card.action.effect[i] == 'damage') {\n            state.player.health -= card.action.power[i];\n            dispatch(updatePlayer({\n              energy: newEnergy\n            }));\n          }\n        } else if (card.action.target[i] == \"affliction\") {\n          dispatch(updatePlayer({\n            energy: newEnergy\n          }));\n        } else {// something\n        }\n      }\n\n      dispatch(playIndexedCard(cardIndex));\n    } else {\n      cardSounds.src = cardError;\n      cardSounds.play();\n      shakeHero(state, requiredHero, mageBody, koMageBody, swordBody, shieldBody);\n    }\n  } else {\n    cardSounds.src = cardError;\n    cardSounds.play();\n    leftRightShake(energyText);\n  }\n};","map":{"version":3,"sources":["/Users/uwu/Documents/Dev/weather-app/src/ducks/player.js"],"names":["createAction","handleActions","useSelector","createSelector","updateMonster","logCombat","cardSuccess","cardError","updatePlayer","setDeck","drawCard","playCard","playIndexedCard","discardHand","voidCard","shuffleDeck","resetDeck","drawHand","addCard","addCardDiscard","removeAilgments","addAilgments","removeCurses","removeDeckAfflictions","initialState","deck","hand","discard","voidDeck","shuffle","j","x","i","length","Math","floor","random","reduceResetDeck","rest","console","log","reduceDrawCard","shuffledDiscard","grabCard","newDeck","slice","newHand","reducePlayCard","emptyHand","newDiscard","reducePlayIndexedCard","payload","splice","exhaust","reduceDiscardHand","reduceAddCard","reduceAddCardDiscard","reduceAddAilgments","offenseHeroAilgments","offenseHeroAilgmentsDuration","utilityHeroAilgments","utilityHeroAilgmentsDuration","defenseHeroAilgments","defenseHeroAilgmentsDuration","indexOfStun","target","findIndex","aligment","duration","effect","reduceRemoveAilgments","reduceRemoveDeckAfflictions","filter","card","type","reduceRemoveCurses","state","action","voidPile","void","selectPlayer","player","usePlayer","checkStanding","requiredHeros","offHeroStanding","offenseHeroStatus","includes","defHeroStanding","defenseHeroStatus","utilHeroStanding","utilityHeroStatus","heroStrikeAnimation","heroElement","transitionTime","animate","transform","iterations","damageFlash","bodyElement","opacity","shakeHero","requiredHero","mage","koMage","sword","shield","leftRightShake","element","moveHero","mageBody","shieldBody","swordBody","choice","applyCard","cardIndex","dispatch","getState","energyCost","energy","standing","foeDefense","monster","defense","cardSounds","document","createElement","getElementById","koMageBody","energyText","aCursedCard","src","play","newEnergy","trample","power","newFoeHealth","parseInt","health","origin","description","name","newFoeDefense","push","aligmentDuration","newPlayerHealth","maxHealth","newPlayerDefense"],"mappings":";;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,SAASC,SAAT,QAA0B,UAA1B,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,6CAAxB;AACA,OAAOC,SAAP,MAAsB,gCAAtB,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAGR,YAAY,CAAC,sBAAD,CAAjC,C,CAEP;;AACA,OAAO,MAAMS,OAAO,GAAGT,YAAY,CAAC,iBAAD,CAA5B;AACP,OAAO,MAAMU,QAAQ,GAAGV,YAAY,CAAC,kBAAD,CAA7B;AACP,OAAO,MAAMW,QAAQ,GAAGX,YAAY,CAAC,kBAAD,CAA7B;AAEP,OAAO,MAAMY,eAAe,GAAGZ,YAAY,CAAC,0BAAD,CAApC;AACP,OAAO,MAAMa,WAAW,GAAGb,YAAY,CAAC,qBAAD,CAAhC;AAEP,OAAO,MAAMc,QAAQ,GAAGd,YAAY,CAAC,kBAAD,CAA7B;AACP,OAAO,MAAMe,WAAW,GAAGf,YAAY,CAAC,qBAAD,CAAhC;AACP,OAAO,MAAMgB,SAAS,GAAGhB,YAAY,CAAC,mBAAD,CAA9B,C,CAEP;;AACA,OAAO,MAAMiB,QAAQ,GAAGjB,YAAY,CAAC,kBAAD,CAA7B,C,CAEP;;AACA,OAAO,MAAMkB,OAAO,GAAGlB,YAAY,CAAC,iBAAD,CAA5B;AACP,OAAO,MAAMmB,cAAc,GAAGnB,YAAY,CAAC,yBAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMoB,eAAe,GAAGpB,YAAY,CAAC,yBAAD,CAApC;AACP,OAAO,MAAMqB,YAAY,GAAGrB,YAAY,CAAC,sBAAD,CAAjC,C,CAEP;;AACA,OAAO,MAAMsB,YAAY,GAAGtB,YAAY,CAAC,sBAAD,CAAjC,C,CAEP;;AACA,OAAO,MAAMuB,qBAAqB,GAAGvB,YAAY,CAAC,gCAAD,CAA1C;AAEP,MAAMwB,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,OAAO,EAAE,EAHQ;AAIjBC,EAAAA,QAAQ,EAAE;AAJO,CAArB;;AAQA,SAASC,OAAT,CAAiBJ,IAAjB,EAAuB;AACnB,MAAIK,CAAJ,EAAOC,CAAP,EAAUC,CAAV;;AACA,OAAKA,CAAC,GAAGP,IAAI,CAACQ,MAAL,GAAc,CAAvB,EAA0BD,CAAC,GAAG,CAA9B,EAAiCA,CAAC,EAAlC,EAAsC;AAClCF,IAAAA,CAAC,GAAGI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAJ;AACAD,IAAAA,CAAC,GAAGN,IAAI,CAACO,CAAD,CAAR;AACAP,IAAAA,IAAI,CAACO,CAAD,CAAJ,GAAUP,IAAI,CAACK,CAAD,CAAd;AACAL,IAAAA,IAAI,CAACK,CAAD,CAAJ,GAAUC,CAAV;AACH;;AACD,SAAON,IAAP;AACH;;AACD,MAAMY,eAAe,GAAG,QAAgD;AAAA,MAA/C;AAAEZ,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,QAAvB;AAAiC,OAAGU;AAApC,GAA+C;AACpE,MAAItB,SAAS,GAAG,CAAC,GAAGS,IAAJ,EAAU,GAAGC,IAAb,EAAmB,GAAGC,OAAtB,EAA+B,GAAGC,QAAlC,CAAhB;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BxB,SAA3B;AACA,SAAO,EAAE,GAAGsB,IAAL;AAAWb,IAAAA,IAAI,EAAET,SAAjB;AAA4BU,IAAAA,IAAI,EAAC,EAAjC;AAAqCE,IAAAA,QAAQ,EAAC,EAA9C;AAAkDD,IAAAA,OAAO,EAAC;AAA1D,GAAP;AACH,CAJD;;AAKA,MAAMc,cAAc,GAAG,SAAsC;AAAA,MAArC;AAAEd,IAAAA,OAAF;AAAWF,IAAAA,IAAX;AAAiBC,IAAAA,IAAjB;AAAuB,OAAGY;AAA1B,GAAqC;;AACzD,MAAKb,IAAI,CAACQ,MAAL,IAAe,CAApB,EAAuB;AACnB,QAAKN,OAAO,CAACM,MAAR,IAAkB,CAAvB,EAA0B;AACtB,aAAO,EAAE,GAAGK,IAAL;AAAWX,QAAAA,OAAX;AAAoBF,QAAAA,IAApB;AAA0BC,QAAAA;AAA1B,OAAP;AACH,KAFD,MAEO;AACH,YAAMgB,eAAe,GAAGb,OAAO,CAACF,OAAD,CAA/B;AACA,YAAMgB,QAAQ,GAAGD,eAAe,CAACA,eAAe,CAACT,MAAhB,GAAuB,CAAxB,CAAhC;AACA,YAAMW,OAAO,GAAGF,eAAe,CAACG,KAAhB,CAAsB,CAAtB,EAAyBH,eAAe,CAACT,MAAhB,GAAuB,CAAhD,CAAhB;AACA,YAAMa,OAAO,GAAG,CAAC,GAAGpB,IAAJ,EAAUiB,QAAV,CAAhB;AACA,aAAO,EAAE,GAAGL,IAAL;AAAWZ,QAAAA,IAAI,EAAEoB,OAAjB;AAA0BrB,QAAAA,IAAI,EAAEmB,OAAhC;AAAyCjB,QAAAA,OAAO,EAAE;AAAlD,OAAP;AACH;AACJ,GAVD,MAUO;AACH,WAAO,EAAE,GAAGW,IAAL;AAAWZ,MAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ,EAAUD,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAY,CAAb,CAAd,CAAjB;AAAiDR,MAAAA,IAAI,EAAEA,IAAI,CAACoB,KAAL,CAAY,CAAZ,EAAepB,IAAI,CAACQ,MAAL,GAAa,CAA5B,CAAvD;AAAuFN,MAAAA;AAAvF,KAAP;AACH;AACJ,CAdD;;AAeA,MAAMoB,cAAc,GAAG,SAAgC;AAAA,MAA/B;AAAEpB,IAAAA,OAAF;AAAWD,IAAAA,IAAX;AAAiB,OAAGY;AAApB,GAA+B;AACnD,QAAMU,SAAS,GAAGtB,IAAI,CAACO,MAAL,GAAc,CAAhC;;AAEA,MAAI,CAACe,SAAL,EAAe;AACX,UAAMF,OAAO,GAAIpB,IAAI,CAACmB,KAAL,CAAY,CAAZ,EAAenB,IAAI,CAACO,MAAL,GAAY,CAA3B,CAAjB;AACA,UAAMgB,UAAU,GAAG,CAAC,GAAGtB,OAAJ,EAAaD,IAAI,CAACA,IAAI,CAACO,MAAL,GAAY,CAAb,CAAjB,CAAnB;AACA,WAAO,EAAE,GAAGK,IAAL;AAAWZ,MAAAA,IAAI,EAAEoB,OAAjB;AAA0BnB,MAAAA,OAAO,EAAEsB;AAAnC,KAAP;AACH,GAJD,MAIK;AACD,WAAO,EAAE,GAAGX,IAAL;AAAWZ,MAAAA,IAAX;AAAiBC,MAAAA;AAAjB,KAAP;AACH;AACJ,CAVD;;AAWA,MAAMuB,qBAAqB,GAAG,kBAAsD;AAAA,MAArD;AAAEtB,IAAAA,QAAF;AAAYD,IAAAA,OAAZ;AAAqBD,IAAAA,IAArB;AAA2B,OAAGY;AAA9B,GAAqD;AAAA,MAAd;AAACa,IAAAA;AAAD,GAAc;AAChF,QAAMR,QAAQ,GAAGjB,IAAI,CAACyB,OAAD,CAArB;AACAzB,EAAAA,IAAI,CAAC0B,MAAL,CAAYD,OAAZ,EAAqB,CAArB;;AAEA,MAAGR,QAAQ,CAACU,OAAZ,EAAoB;AAChB,WAAO,EAAE,GAAGf,IAAL;AAAWV,MAAAA,QAAQ,EAAE,CAAC,GAAGA,QAAJ,EAAce,QAAd,CAArB;AAA8CjB,MAAAA,IAAI,EAAEA,IAApD;AAA0DC,MAAAA,OAAO,EAAEA;AAAnE,KAAP;AACH,GAFD,MAEK;AACD,WAAO,EAAE,GAAGW,IAAL;AAAWV,MAAAA,QAAQ,EAAEA,QAArB;AAA+BF,MAAAA,IAAI,EAAEA,IAArC;AAA2CC,MAAAA,OAAO,EAAE,CAAC,GAAGA,OAAJ,EAAagB,QAAb;AAApD,KAAP;AACH;AACJ,CATD;;AAUA,MAAMW,iBAAiB,GAAG,SAAgC;AAAA,MAA/B;AAAE3B,IAAAA,OAAF;AAAWD,IAAAA,IAAX;AAAiB,OAAGY;AAApB,GAA+B;AACtD,QAAMU,SAAS,GAAGtB,IAAI,CAACO,MAAL,GAAc,CAAhC;;AAEA,MAAI,CAACe,SAAL,EAAe;AACX,UAAMF,OAAO,GAAG,EAAhB;AACA,UAAMG,UAAU,GAAG,CAAC,GAAGtB,OAAJ,EAAa,GAAGD,IAAhB,CAAnB;AACA,WAAO,EAAE,GAAGY,IAAL;AAAWZ,MAAAA,IAAI,EAAEoB,OAAjB;AAA0BnB,MAAAA,OAAO,EAAEsB;AAAnC,KAAP;AACH,GAJD,MAIK;AACD,WAAO,EAAE,GAAGX,IAAL;AAAWZ,MAAAA,IAAX;AAAiBC,MAAAA;AAAjB,KAAP;AACH;AACJ,CAVD;;AAWA,MAAM4B,aAAa,GAAG,kBAAkC;AAAA,MAAjC;AAAE9B,IAAAA,IAAF;AAAQ,OAAGa;AAAX,GAAiC;AAAA,MAAd;AAACa,IAAAA;AAAD,GAAc;AACpD,QAAMP,OAAO,GAAG,CAAC,GAAGnB,IAAJ,EAAU0B,OAAV,CAAhB;AACA,SAAO,EAAE,GAAGb,IAAL;AAAWb,IAAAA,IAAI,EAAEmB;AAAjB,GAAP;AACH,CAHD;;AAIA,MAAMY,oBAAoB,GAAG,mBAAmC;AAAA,MAAlC;AAAC7B,IAAAA,OAAD;AAAU,OAAGW;AAAb,GAAkC;AAAA,MAAd;AAACa,IAAAA;AAAD,GAAc;AAC5D,QAAMF,UAAU,GAAG,CAAC,GAAGtB,OAAJ,EAAawB,OAAb,CAAnB;AACA,SAAO,EAAE,GAAGb,IAAL;AAAWX,IAAAA,OAAO,EAAEsB;AAApB,GAAP;AACH,CAHD;;AAIA,MAAMQ,kBAAkB,GAAG,oBAAsL;AAAA,MAArL;AAACC,IAAAA,oBAAD;AAAuBC,IAAAA,4BAAvB;AAAqDC,IAAAA,oBAArD;AAA2EC,IAAAA,4BAA3E;AAAyGC,IAAAA,oBAAzG;AAA+HC,IAAAA,4BAA/H;AAA6J,OAAGzB;AAAhK,GAAqL;AAAA,MAAd;AAACa,IAAAA;AAAD,GAAc;AAE7MZ,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCW,OAAjC;AAEA,MAAIa,WAAW,GAAG,CAAC,CAAnB;;AAEA,UAAQb,OAAO,CAACc,MAAhB;AAEI,SAAK,MAAL;AACID,MAAAA,WAAW,GAAGJ,oBAAoB,CAACM,SAArB,CAAgCC,QAAQ,IAAIA,QAAQ,IAAI,MAAxD,CAAd;;AACA,UAAKH,WAAW,IAAI,CAAC,CAArB,EAAwB;AACpBH,QAAAA,4BAA4B,CAACG,WAAD,CAA5B,GAA6CH,4BAA4B,CAACG,WAAD,CAA5B,GAA4Cb,OAAO,CAACiB,QAAjG;AACH,OAFD,MAEK;AACDR,QAAAA,oBAAoB,GAAG,CAAC,GAAGA,oBAAJ,EAA0BT,OAAO,CAACkB,MAAlC,CAAvB;AACAR,QAAAA,4BAA4B,GAAG,CAAC,GAAGA,4BAAJ,EAAkCV,OAAO,CAACiB,QAA1C,CAA/B;AACH;;AACD;;AACJ,SAAK,OAAL;AACIJ,MAAAA,WAAW,GAAGN,oBAAoB,CAACQ,SAArB,CAAgCC,QAAQ,IAAIA,QAAQ,IAAI,MAAxD,CAAd;;AACA,UAAKH,WAAW,IAAI,CAAC,CAArB,EAAwB;AACpBL,QAAAA,4BAA4B,CAACK,WAAD,CAA5B,GAA6CL,4BAA4B,CAACK,WAAD,CAA5B,GAA4Cb,OAAO,CAACiB,QAAjG;AACH,OAFD,MAEK;AACDV,QAAAA,oBAAoB,GAAG,CAAC,GAAGA,oBAAJ,EAA0BP,OAAO,CAACkB,MAAlC,CAAvB;AACAV,QAAAA,4BAA4B,GAAG,CAAC,GAAGA,4BAAJ,EAAkCR,OAAO,CAACiB,QAA1C,CAA/B;AACH;;AACD;;AACJ,SAAK,QAAL;AACIJ,MAAAA,WAAW,GAAGF,oBAAoB,CAACI,SAArB,CAAgCC,QAAQ,IAAIA,QAAQ,IAAI,MAAxD,CAAd;;AACA,UAAKH,WAAW,IAAI,CAAC,CAArB,EAAwB;AACpBD,QAAAA,4BAA4B,CAACC,WAAD,CAA5B,GAA6CD,4BAA4B,CAACC,WAAD,CAA5B,GAA4Cb,OAAO,CAACiB,QAAjG;AACH,OAFD,MAEK;AACDN,QAAAA,oBAAoB,GAAG,CAAC,GAAGA,oBAAJ,EAA0BX,OAAO,CAACkB,MAAlC,CAAvB;AACAN,QAAAA,4BAA4B,GAAG,CAAC,GAAGA,4BAAJ,EAAkCZ,OAAO,CAACiB,QAA1C,CAA/B;AACH;;AACD;;AACJ;AACI7B,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BW,OAAO,CAACc,MAAtC;AA9BR;;AAiCA,SAAO,EAAE,GAAG3B,IAAL;AAAWoB,IAAAA,oBAAoB,EAAEA,oBAAjC;AAAuDC,IAAAA,4BAA4B,EAAEA,4BAArF;AAAmHC,IAAAA,oBAAoB,EAAEA,oBAAzI;AAA+JC,IAAAA,4BAA4B,EAAEA,4BAA7L;AAA2NC,IAAAA,oBAAoB,EAAEA,oBAAjP;AAAuQC,IAAAA,4BAA4B,EAAEA;AAArS,GAAP;AACH,CAxCD;;AAyCA,MAAMO,qBAAqB,GAAG,UAA2K;AAAA,MAA1K;AAACZ,IAAAA,oBAAD;AAAuBC,IAAAA,4BAAvB;AAAqDC,IAAAA,oBAArD;AAA2EC,IAAAA,4BAA3E;AAAyGC,IAAAA,oBAAzG;AAA+HC,IAAAA,4BAA/H;AAA6J,OAAGzB;AAAhK,GAA0K;AACrM,SAAO,EAAE,GAAGA,IAAL;AAAWoB,IAAAA,oBAAoB,EAAE,EAAjC;AAAqCC,IAAAA,4BAA4B,EAAE,EAAnE;AAAuEC,IAAAA,oBAAoB,EAAE,EAA7F;AAAiGC,IAAAA,4BAA4B,EAAE,EAA/H;AAAmIC,IAAAA,oBAAoB,EAAE,EAAzJ;AAA6JC,IAAAA,4BAA4B,EAAE;AAA3L,GAAP;AACH,CAFD;;AAGA,MAAMQ,2BAA2B,GAAG,UAAqC;AAAA,MAApC;AAAE9C,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,OAAd;AAAuB,OAAGW;AAA1B,GAAoC;AACrE,MAAIM,OAAO,GAAGnB,IAAI,CAAC+C,MAAL,CAAaC,IAAI,IAAI;AAC/B,QAAK,EAAEA,IAAI,CAACC,IAAL,KAAc,YAAhB,CAAL,EAAoC;AAChC,aAAOD,IAAP;AACH;AACJ,GAJa,CAAd;AAKA,MAAI3B,OAAO,GAAGpB,IAAI,CAAC8C,MAAL,CAAaC,IAAI,IAAI;AAC/B,QAAK,EAAEA,IAAI,CAACC,IAAL,KAAc,YAAhB,CAAL,EAAoC;AAChC,aAAOD,IAAP;AACH;AACJ,GAJa,CAAd;AAKA,MAAIxB,UAAU,GAAGtB,OAAO,CAAC6C,MAAR,CAAgBC,IAAI,IAAI;AACrC,QAAK,EAAEA,IAAI,CAACC,IAAL,KAAc,YAAhB,CAAL,EAAoC;AAChC,aAAOD,IAAP;AACH;AACJ,GAJgB,CAAjB;AAMA,SAAO,EAAC,GAAGnC,IAAJ;AAAUb,IAAAA,IAAI,EAAGmB,OAAjB;AAA0BlB,IAAAA,IAAI,EAAEoB,OAAhC;AAAyCnB,IAAAA,OAAO,EAAEsB;AAAlD,GAAP;AACH,CAlBD;;AAmBA,MAAM0B,kBAAkB,GAAG,UAAqB;AAAA,MAApB;AAAClD,IAAAA,IAAD;AAAO,OAAGa;AAAV,GAAoB;AAC5C,MAAIM,OAAO,GAAGnB,IAAI,CAAC+C,MAAL,CAAaC,IAAI,IAAI;AAC/B,QAAK,EAAEA,IAAI,CAACC,IAAL,IAAa,OAAf,CAAL,EAA8B;AAC1B,aAAOD,IAAP;AACH;AACJ,GAJa,CAAd;AAMA,SAAO,EAAC,GAAGnC,IAAJ;AAAUb,IAAAA,IAAI,EAAGmB;AAAjB,GAAP;AACH,CARD;;AAWA,eAAe3C,aAAa,CAAC;AACzB,GAACgB,QAAD,GAAa2D,KAAD,KAAY,EAAC,GAAGA,KAAJ;AAAWnD,IAAAA,IAAI,EAAEmD,KAAK,CAACnD,IAAN,CAAWoB,KAAX,CAAkB,CAAlB,EAAqB+B,KAAK,CAACnD,IAAN,CAAWQ,MAAX,GAAmB,CAAxC,CAAjB;AAA6DP,IAAAA,IAAI,EAAE,CAAC,GAAGkD,KAAK,CAAClD,IAAV,EAAgB,GAAGkD,KAAK,CAACnD,IAAN,CAAWoB,KAAX,CAAiB,CAAC,CAAlB,CAAnB;AAAnE,GAAZ,CADa;AAEzB,GAAC9B,WAAD,GAAgB6D,KAAD,KAAY,EAAC,GAAGA,KAAJ;AAAWnD,IAAAA,IAAI,EAAEI,OAAO,CAAC+C,KAAK,CAACnD,IAAP;AAAxB,GAAZ,CAFU;AAGzB,GAACjB,YAAD,GAAgB,CAACoE,KAAD,EAAQC,MAAR,MAAoB,EAAE,GAAGD,KAAL;AAAY,OAAGC,MAAM,CAAC1B;AAAtB,GAApB,CAHS;AAIzB,GAAC1C,OAAD,GAAW,CAACmE,KAAD,EAAQC,MAAR,MAAoB,EAAC,GAAGD,KAAJ;AAAWnD,IAAAA,IAAI,EAAEoD,MAAM,CAAC1B;AAAxB,GAApB,CAJc;AAMzB,GAACnC,SAAD,GAAaqB,eANY;AAOzB,GAACjB,eAAD,GAAmBkD,qBAPM;AAQzB,GAACjD,YAAD,GAAgBoC,kBARS;AAUzB,GAAClC,qBAAD,GAAyBgD,2BAVA;AAWzB,GAACjD,YAAD,GAAgBqD,kBAXS;AAazB,GAACjE,QAAD,GAAY+B,cAba;AAczB,GAAC9B,QAAD,GAAYoC,cAda;AAgBzB,GAACnC,eAAD,GAAmBsC,qBAhBM;AAiBzB,GAACrC,WAAD,GAAeyC,iBAjBU;AAmBzB,GAACpC,OAAD,GAAWqC,aAnBc;AAoBzB,GAACpC,cAAD,GAAkBqC,oBApBO;AAsBzB,GAAC1C,QAAD,GAAY,CAAC8D,KAAD,EAAQC,MAAR,MAAoB,EAAC,GAAGD,KAAJ;AAAWlD,IAAAA,IAAI,EAAEkD,KAAK,CAAClD,IAAN,CAAWmB,KAAX,CAAiBgC,MAAM,CAAC1B,OAAxB,EAAiC,CAAjC,CAAjB;AAAsD2B,IAAAA,QAAQ,EAAE,CAAC,GAAGF,KAAK,CAACG,IAAV,EAAgBH,KAAK,CAAClD,IAAN,CAAWmB,KAAX,CAAiBgC,MAAM,CAAC1B,OAAxB,EAAiC,CAAjC,CAAhB;AAAhE,GAApB;AAtBa,CAAD,EAuBzB3B,YAvByB,CAA5B;AA0BA,MAAMwD,YAAY,GAAG7E,cAAc,CAC/ByE,KAAK,IAAIA,KAAK,CAACK,MADgB,EAE/BA,MAAM,IAAIA,MAFqB,CAAnC;AAKA,OAAO,MAAMC,SAAS,GAAG;AAAA;;AAAA,SAAMhF,WAAW,CAAC8E,YAAD,CAAjB;AAAA,CAAlB;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAZaE,S;UAAkBhF,W;;;AAa/B,SAASiF,aAAT,CAAuBP,KAAvB,EAA8BQ,aAA9B,EAA4C;AAExC,QAAMC,eAAe,GAAKT,KAAK,CAACK,MAAN,CAAaK,iBAAb,KAAmC,UAAnC,IAAiD,CAACV,KAAK,CAACK,MAAN,CAAavB,oBAAb,CAAkC6B,QAAlC,CAA2C,MAA3C,CAAnD,GAA0G,IAA1G,GAAiH,KAA1I;AACA,QAAMC,eAAe,GAAKZ,KAAK,CAACK,MAAN,CAAaQ,iBAAb,KAAmC,UAAnC,IAAiD,CAACb,KAAK,CAACK,MAAN,CAAanB,oBAAb,CAAkCyB,QAAlC,CAA2C,MAA3C,CAAnD,GAA0G,IAA1G,GAAiH,KAA1I;AACA,QAAMG,gBAAgB,GAAKd,KAAK,CAACK,MAAN,CAAaU,iBAAb,KAAmC,UAAnC,IAAiD,CAACf,KAAK,CAACK,MAAN,CAAarB,oBAAb,CAAkC2B,QAAlC,CAA2C,MAA3C,CAAnD,GAA0G,IAA1G,GAAiH,KAA3I;;AAEA,UAAQH,aAAR;AACI,SAAK,GAAL;AACI,aAAQC,eAAe,IAAIG,eAAnB,IAAsCE,gBAA9C;;AACJ,SAAK,GAAL;AACI,aAAQL,eAAR;;AACJ,SAAK,GAAL;AACI,aAAQK,gBAAR;;AACJ,SAAK,GAAL;AACI,aAAQF,eAAR;;AACJ,SAAK,IAAL;AACI,aAAQA,eAAe,IAAIH,eAA3B;;AACJ,SAAK,IAAL;AACI,aAAQG,eAAe,IAAIE,gBAA3B;;AACJ,SAAK,IAAL;AACI,aAAQL,eAAe,IAAIK,gBAA3B;;AACJ,SAAK,GAAL;AACI,aAAQL,eAAe,IAAIG,eAAnB,IAAsCE,gBAA9C;AAhBR;AAkBH,C,CAED;;;AACA,SAASE,mBAAT,CAA6BC,WAA7B,EAAyC;AACrC,MAAIC,cAAc,GAAG,GAArB;AACAD,EAAAA,WAAW,CAACE,OAAZ,CAAoB,CAChB;AAACC,IAAAA,SAAS,EAAE;AAAZ,GADgB,EAEhB;AAACA,IAAAA,SAAS,EAAE;AAAZ,GAFgB,EAGhB;AAACA,IAAAA,SAAS,EAAE;AAAZ,GAHgB,EAIhB;AAACA,IAAAA,SAAS,EAAE;AAAZ,GAJgB,EAKhB;AAACA,IAAAA,SAAS,EAAE;AAAZ,GALgB,CAApB,EAOG;AACC5B,IAAAA,QAAQ,EAAE0B,cADX;AAECG,IAAAA,UAAU,EAAE;AAFb,GAPH;AAWH;;AAED,SAASC,WAAT,CAAqBC,WAArB,EAAiC;AAC7B,MAAIL,cAAc,GAAG,GAArB;AACAK,EAAAA,WAAW,CAACJ,OAAZ,CAAoB,CAChB;AAACK,IAAAA,OAAO,EAAE;AAAV,GADgB,EAEhB;AAACA,IAAAA,OAAO,EAAE;AAAV,GAFgB,EAGhB;AAACA,IAAAA,OAAO,EAAE;AAAV,GAHgB,EAIhB;AAACA,IAAAA,OAAO,EAAE;AAAV,GAJgB,EAKhB;AAACA,IAAAA,OAAO,EAAE;AAAV,GALgB,EAMhB;AAACA,IAAAA,OAAO,EAAE;AAAV,GANgB,EAOhB;AAACA,IAAAA,OAAO,EAAE;AAAV,GAPgB,CAApB,EASG;AACChC,IAAAA,QAAQ,EAAE0B,cADX;AAECG,IAAAA,UAAU,EAAE;AAFb,GATH;AAaH;;AAED,SAASI,SAAT,CAAmBzB,KAAnB,EAA0B0B,YAA1B,EAAwCC,IAAxC,EAA8CC,MAA9C,EAAsDC,KAAtD,EAA6DC,MAA7D,EAAoE;AAEhE,QAAMrB,eAAe,GAAKT,KAAK,CAACK,MAAN,CAAaK,iBAAb,KAAmC,UAAnC,IAAiD,CAACV,KAAK,CAACK,MAAN,CAAavB,oBAAb,CAAkC6B,QAAlC,CAA2C,MAA3C,CAAnD,GAA0G,IAA1G,GAAiH,KAA1I;AACA,QAAMC,eAAe,GAAKZ,KAAK,CAACK,MAAN,CAAaQ,iBAAb,KAAmC,UAAnC,IAAiD,CAACb,KAAK,CAACK,MAAN,CAAanB,oBAAb,CAAkCyB,QAAlC,CAA2C,MAA3C,CAAnD,GAA0G,IAA1G,GAAiH,KAA1I;AACA,QAAMG,gBAAgB,GAAKd,KAAK,CAACK,MAAN,CAAaU,iBAAb,KAAmC,UAAnC,IAAiD,CAACf,KAAK,CAACK,MAAN,CAAarB,oBAAb,CAAkC2B,QAAlC,CAA2C,MAA3C,CAAnD,GAA0G,IAA1G,GAAiH,KAA3I;;AAEA,UAAQe,YAAR;AACI,SAAK,GAAL;AACIK,MAAAA,cAAc,CAACF,KAAD,CAAd;AACA;;AACJ,SAAK,GAAL;AACIE,MAAAA,cAAc,CAACJ,IAAD,CAAd;AACAI,MAAAA,cAAc,CAACH,MAAD,CAAd;AACA;;AACJ,SAAK,GAAL;AACIG,MAAAA,cAAc,CAACD,MAAD,CAAd;AACA;;AACJ,SAAK,IAAL;AACI,UAAI,CAAClB,eAAL,EAAqB;AACjBmB,QAAAA,cAAc,CAACD,MAAD,CAAd;AACH;;AACD,UAAI,CAACrB,eAAL,EAAqB;AACjBsB,QAAAA,cAAc,CAACF,KAAD,CAAd;AACH;;AACD;;AACJ,SAAK,IAAL;AACI,UAAI,CAACjB,eAAL,EAAqB;AACjBmB,QAAAA,cAAc,CAACD,MAAD,CAAd;AACH;;AACD,UAAI,CAAChB,gBAAL,EAAsB;AAClBiB,QAAAA,cAAc,CAACJ,IAAD,CAAd;AACAI,QAAAA,cAAc,CAACH,MAAD,CAAd;AACH;;AACD;;AACJ,SAAK,IAAL;AACI,UAAI,CAACnB,eAAL,EAAqB;AACjBsB,QAAAA,cAAc,CAACF,KAAD,CAAd;AACH;;AACD,UAAI,CAACf,gBAAL,EAAsB;AAClBiB,QAAAA,cAAc,CAACJ,IAAD,CAAd;AACAI,QAAAA,cAAc,CAACH,MAAD,CAAd;AACH;;AACD;;AACJ,SAAK,GAAL;AACI,UAAI,CAACnB,eAAL,EAAqB;AACjBsB,QAAAA,cAAc,CAACF,KAAD,CAAd;AACH;;AACD,UAAI,CAACjB,eAAL,EAAqB;AACjBmB,QAAAA,cAAc,CAACD,MAAD,CAAd;AACH;;AACD,UAAI,CAAChB,gBAAL,EAAsB;AAClBiB,QAAAA,cAAc,CAACJ,IAAD,CAAd;AACAI,QAAAA,cAAc,CAACH,MAAD,CAAd;AACH;;AACD;AAhDR;AAkDH;;AAED,SAASG,cAAT,CAAwBC,OAAxB,EAAgC;AAC5B,MAAId,cAAc,GAAG,GAArB;AACAc,EAAAA,OAAO,CAACb,OAAR,CAAgB,CACZ;AAACC,IAAAA,SAAS,EAAE;AAAZ,GADY,EAEZ;AAACA,IAAAA,SAAS,EAAE;AAAZ,GAFY,EAGZ;AAACA,IAAAA,SAAS,EAAE;AAAZ,GAHY,EAIZ;AAACA,IAAAA,SAAS,EAAE;AAAZ,GAJY,CAAhB,EAKG;AACC5B,IAAAA,QAAQ,EAAE0B,cADX;AAECG,IAAAA,UAAU,EAAE;AAFb,GALH;AASH,C,CAED;;;AACA,SAASY,QAAT,CAAkBzB,aAAlB,EAAiC0B,QAAjC,EAA2CC,UAA3C,EAAuDC,SAAvD,EAAiE;AAC7D,UAAQ5B,aAAR;AACI,SAAK,GAAL;AACI,UAAI6B,MAAM,GAAG/E,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAb;;AACA,UAAI6E,MAAM,KAAK,CAAf,EAAkB;AACdrB,QAAAA,mBAAmB,CAACoB,SAAD,CAAnB;AACH,OAFD,MAEM,IAAIC,MAAM,KAAK,CAAf,EAAiB;AACnBrB,QAAAA,mBAAmB,CAACmB,UAAD,CAAnB;AACH,OAFK,MAED;AACDnB,QAAAA,mBAAmB,CAACkB,QAAD,CAAnB;AACH;;AACD;;AACJ,SAAK,GAAL;AACIlB,MAAAA,mBAAmB,CAACoB,SAAD,CAAnB;AACA;;AACJ,SAAK,GAAL;AACIpB,MAAAA,mBAAmB,CAACkB,QAAD,CAAnB;AACA;;AACJ,SAAK,GAAL;AACIlB,MAAAA,mBAAmB,CAACmB,UAAD,CAAnB;AACA;;AACJ,SAAK,IAAL;AACInB,MAAAA,mBAAmB,CAACoB,SAAD,CAAnB;AACApB,MAAAA,mBAAmB,CAACmB,UAAD,CAAnB;AACA;;AACJ,SAAK,IAAL;AACInB,MAAAA,mBAAmB,CAACmB,UAAD,CAAnB;AACAnB,MAAAA,mBAAmB,CAACkB,QAAD,CAAnB;AACA;;AACJ,SAAK,IAAL;AACIlB,MAAAA,mBAAmB,CAACoB,SAAD,CAAnB;AACApB,MAAAA,mBAAmB,CAACkB,QAAD,CAAnB;AACA;;AACJ,SAAK,GAAL;AACIlB,MAAAA,mBAAmB,CAACoB,SAAD,CAAnB;AACApB,MAAAA,mBAAmB,CAACmB,UAAD,CAAnB;AACAnB,MAAAA,mBAAmB,CAACkB,QAAD,CAAnB;AACA;AApCR;AAsCH,C,CAED;;;AACA,OAAO,MAAMI,SAAS,GAAIC,SAAD,IAAe,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC5D,QAAMzC,KAAK,GAAGyC,QAAQ,EAAtB;AAEA,QAAM5C,IAAI,GAAGG,KAAK,CAACK,MAAN,CAAavD,IAAb,CAAkByF,SAAlB,CAAb;AACA,QAAMG,UAAU,GAAG7C,IAAI,CAAC8C,MAAxB;AAEA,QAAMjB,YAAY,GAAG7B,IAAI,CAAC6B,YAA1B;AACA,QAAMkB,QAAQ,GAAGrC,aAAa,CAACP,KAAD,EAAQ0B,YAAR,CAA9B;AACA,QAAMmB,UAAU,GAAG7C,KAAK,CAAC8C,OAAN,CAAcC,OAAjC;AAEA,MAAIC,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAjB;AAEA,MAAIhB,QAAQ,GAAGe,QAAQ,CAACE,cAAT,CAAwB,UAAxB,CAAf;AACA,MAAIC,UAAU,GAAGH,QAAQ,CAACE,cAAT,CAAwB,YAAxB,CAAjB;AACA,MAAIhB,UAAU,GAAGc,QAAQ,CAACE,cAAT,CAAwB,YAAxB,CAAjB;AACA,MAAIf,SAAS,GAAGa,QAAQ,CAACE,cAAT,CAAwB,WAAxB,CAAhB;AAEA,MAAIE,UAAU,GAAGJ,QAAQ,CAACE,cAAT,CAAwB,gBAAxB,CAAjB;AAEA,MAAIG,WAAW,GAAGzD,IAAI,CAACC,IAAL,KAAc,OAAd,GAAwB,IAAxB,GAA+B,KAAjD;;AAGA,MAAI4C,UAAU,IAAI1C,KAAK,CAACK,MAAN,CAAasC,MAA3B,IAAqC,CAACW,WAA1C,EAAuD;AACnDN,IAAAA,UAAU,CAACO,GAAX,GAAiB7H,WAAjB;AACAsH,IAAAA,UAAU,CAACQ,IAAX;;AAEA,QAAIZ,QAAJ,EAAa;AAETX,MAAAA,QAAQ,CAACpC,IAAI,CAAC6B,YAAN,EAAoBQ,QAApB,EAA8BC,UAA9B,EAA0CC,SAA1C,CAAR;AACA,YAAMqB,SAAS,GAAGzD,KAAK,CAACK,MAAN,CAAasC,MAAb,GAAsBD,UAAxC;;AAEA,WAAK,IAAItF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyC,IAAI,CAACI,MAAL,CAAYZ,MAAZ,CAAmBhC,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAEhD,YAAIyC,IAAI,CAACI,MAAL,CAAYZ,MAAZ,CAAmBjC,CAAnB,KAAyB,KAA7B,EAAmC;AAC/B,cAAIyC,IAAI,CAACI,MAAL,CAAYR,MAAZ,CAAmBrC,CAAnB,KAAyB,QAA7B,EAAsC;AAClCkE,YAAAA,WAAW,CAAC2B,QAAQ,CAACE,cAAT,CAAwB,uBAAxB,CAAD,CAAX;AACA,kBAAMO,OAAO,GAAGb,UAAU,GAAGhD,IAAI,CAACI,MAAL,CAAY0D,KAAZ,CAAkBvG,CAAlB,CAA7B;;AACA,gBAAIsG,OAAO,GAAG,CAAd,EAAiB;AACb,oBAAME,YAAY,GAAGC,QAAQ,CAAC7D,KAAK,CAAC8C,OAAN,CAAcgB,MAAf,CAAR,GAAiCD,QAAQ,CAACH,OAAD,CAA9D;AACAlB,cAAAA,QAAQ,CAAChH,aAAa,CAAC;AAAEsI,gBAAAA,MAAM,EAAEF,YAAV;AAAwBb,gBAAAA,OAAO,EAAE;AAAjC,eAAD,CAAd,CAAR;AACAP,cAAAA,QAAQ,CAAC/G,SAAS,CAAC;AAAEsI,gBAAAA,MAAM,EAAE,QAAV;AAAoBC,gBAAAA,WAAW,EAAG,kBAAgBnE,IAAI,CAACoE,IAArB,GAA0B,WAA1B,GAAwC,CAAC,CAAF,GAAMP,OAA7C,GAAuD;AAAzF,eAAD,CAAV,CAAR;AACH,aAJD,MAIK;AACD,oBAAMQ,aAAa,GAAGR,OAAtB;AACAlB,cAAAA,QAAQ,CAAChH,aAAa,CAAC;AAAEuH,gBAAAA,OAAO,EAAEmB;AAAX,eAAD,CAAd,CAAR;AACA1B,cAAAA,QAAQ,CAAC/G,SAAS,CAAC;AAAEsI,gBAAAA,MAAM,EAAE,QAAV;AAAoBC,gBAAAA,WAAW,EAAG,kBAAgBnE,IAAI,CAACoE,IAArB,GAA0B;AAA5D,eAAD,CAAV,CAAR;AACH;;AACDzB,YAAAA,QAAQ,CAAC5G,YAAY,CAAC;AAAE+G,cAAAA,MAAM,EAAEc;AAAV,aAAD,CAAb,CAAR;AACH,WAbD,MAaM,IAAI5D,IAAI,CAACI,MAAL,CAAYR,MAAZ,CAAmBrC,CAAnB,KAAyB,MAA7B,EAAoC;AACtC4C,YAAAA,KAAK,CAAC8C,OAAN,CAAcvD,QAAd,CAAuB4E,IAAvB,CAA4B,MAA5B;AACAnE,YAAAA,KAAK,CAAC8C,OAAN,CAAcsB,gBAAd,CAA+BD,IAA/B,CAAoCtE,IAAI,CAACI,MAAL,CAAY0D,KAAZ,CAAkBvG,CAAlB,CAApC;AACAoF,YAAAA,QAAQ,CAAC5G,YAAY,CAAC;AAAE+G,cAAAA,MAAM,EAAEc;AAAV,aAAD,CAAb,CAAR;AACH,WAJK,MAIA,IAAI5D,IAAI,CAACI,MAAL,CAAYR,MAAZ,CAAmBrC,CAAnB,KAAyB,cAA7B,EAA4C;AAC9C,kBAAMsG,OAAO,GAAGb,UAAU,GAAG7C,KAAK,CAACK,MAAN,CAAa0C,OAA1C;;AACA,gBAAIW,OAAO,GAAG,CAAd,EAAiB;AACb,oBAAME,YAAY,GAAGC,QAAQ,CAAC7D,KAAK,CAAC8C,OAAN,CAAcgB,MAAf,CAAR,GAAiCD,QAAQ,CAACH,OAAD,CAA9D;AACAlB,cAAAA,QAAQ,CAAChH,aAAa,CAAC;AAAEsI,gBAAAA,MAAM,EAAEF,YAAV;AAAwBb,gBAAAA,OAAO,EAAE;AAAjC,eAAD,CAAd,CAAR;AACAP,cAAAA,QAAQ,CAAC/G,SAAS,CAAC;AAAEsI,gBAAAA,MAAM,EAAE,QAAV;AAAoBC,gBAAAA,WAAW,EAAG,kBAAgBnE,IAAI,CAACoE,IAArB,GAA0B,WAA1B,GAAwC,CAAC,CAAF,GAAMP,OAA7C,GAAuD;AAAzF,eAAD,CAAV,CAAR;AACH,aAJD,MAIK;AACD,oBAAMQ,aAAa,GAAGR,OAAtB;AACAlB,cAAAA,QAAQ,CAAChH,aAAa,CAAC;AAAEuH,gBAAAA,OAAO,EAAEmB;AAAX,eAAD,CAAd,CAAR;AACA1B,cAAAA,QAAQ,CAAC/G,SAAS,CAAC;AAAEsI,gBAAAA,MAAM,EAAE,QAAV;AAAoBC,gBAAAA,WAAW,EAAG,kBAAgBnE,IAAI,CAACoE,IAArB,GAA0B;AAA5D,eAAD,CAAV,CAAR;AACH;;AACDzB,YAAAA,QAAQ,CAAC5G,YAAY,CAAC;AAAE+G,cAAAA,MAAM,EAAEc;AAAV,aAAD,CAAb,CAAR;AACH;AACJ,SA/BD,MA+BM,IAAI5D,IAAI,CAACI,MAAL,CAAYZ,MAAZ,CAAmBjC,CAAnB,KAAyB,QAA7B,EAAsC;AACxC,cAAIyC,IAAI,CAACI,MAAL,CAAYR,MAAZ,CAAmBrC,CAAnB,KAAuB,MAA3B,EAAkC;AAC9B,kBAAMiH,eAAe,GAAKR,QAAQ,CAAC7D,KAAK,CAACK,MAAN,CAAayD,MAAd,CAAR,GAAgCD,QAAQ,CAAChE,IAAI,CAACI,MAAL,CAAY0D,KAAZ,CAAkBvG,CAAlB,CAAD,CAA1C,GAAqEyG,QAAQ,CAAC7D,KAAK,CAACK,MAAN,CAAaiE,SAAd,CAA7E,GAAyGT,QAAQ,CAAC7D,KAAK,CAACK,MAAN,CAAaiE,SAAd,CAAjH,GAA8IT,QAAQ,CAAC7D,KAAK,CAACK,MAAN,CAAayD,MAAd,CAAR,GAAgCD,QAAQ,CAAChE,IAAI,CAACI,MAAL,CAAY0D,KAAZ,CAAkBvG,CAAlB,CAAD,CAA9M;AACAoF,YAAAA,QAAQ,CAAC5G,YAAY,CAAC;AAAEkI,cAAAA,MAAM,EAAEO,eAAV;AAA2B1B,cAAAA,MAAM,EAAEc;AAAnC,aAAD,CAAb,CAAR;AACAjB,YAAAA,QAAQ,CAAC/G,SAAS,CAAC;AAAEsI,cAAAA,MAAM,EAAE,QAAV;AAAoBC,cAAAA,WAAW,EAAG,kBAAgBnE,IAAI,CAACoE,IAArB,GAA0B,WAA1B,GAAsCpE,IAAI,CAACI,MAAL,CAAY0D,KAAZ,CAAkBvG,CAAlB,CAAtC,GAA2D;AAA7F,aAAD,CAAV,CAAR;AACH,WAJD,MAIM,IAAIyC,IAAI,CAACI,MAAL,CAAYR,MAAZ,CAAmBrC,CAAnB,KAAyB,MAA7B,EAAoC;AACtCoF,YAAAA,QAAQ,CAAC7F,qBAAqB,EAAtB,CAAR;AACH,WAFK,MAEC,IAAIkD,IAAI,CAACI,MAAL,CAAYR,MAAZ,CAAmBrC,CAAnB,KAAyB,SAA7B,EAAuC;AAC1C,kBAAM2F,OAAO,GAAGlD,IAAI,CAACI,MAAL,CAAY0D,KAAZ,CAAkBvG,CAAlB,CAAhB;AACA,kBAAMmH,gBAAgB,GAAGV,QAAQ,CAAC7D,KAAK,CAACK,MAAN,CAAa0C,OAAd,CAAR,GAAiCc,QAAQ,CAACd,OAAD,CAAlE;AACAP,YAAAA,QAAQ,CAAC5G,YAAY,CAAC;AAAEmH,cAAAA,OAAO,EAAEwB,gBAAX;AAA6B5B,cAAAA,MAAM,EAAEc;AAArC,aAAD,CAAb,CAAR;AACAjB,YAAAA,QAAQ,CAAC/G,SAAS,CAAC;AAAEsI,cAAAA,MAAM,EAAE,QAAV;AAAoBC,cAAAA,WAAW,EAAG,kBAAgBnE,IAAI,CAACoE,IAArB,GAA0B,WAA1B,GAAsClB,OAAtC,GAA8C;AAAhF,aAAD,CAAV,CAAR;AACH,WALM,MAKA,IAAIlD,IAAI,CAACI,MAAL,CAAYR,MAAZ,CAAmBrC,CAAnB,KAAyB,cAA7B,EAA4C;AAC/C4C,YAAAA,KAAK,CAACK,MAAN,CAAarB,oBAAb,CAAkCmF,IAAlC,CAAuC,MAAvC;AACAnE,YAAAA,KAAK,CAACK,MAAN,CAAapB,4BAAb,CAA0CkF,IAA1C,CAA+CtE,IAAI,CAACI,MAAL,CAAY0D,KAAZ,CAAkBvG,CAAlB,CAA/C;AACAoF,YAAAA,QAAQ,CAAC5G,YAAY,CAAC;AAAE+G,cAAAA,MAAM,EAAEc;AAAV,aAAD,CAAb,CAAR;AACH,WAJM,MAIA,IAAI5D,IAAI,CAACI,MAAL,CAAYR,MAAZ,CAAmBrC,CAAnB,KAAyB,cAA7B,EAA4C;AAC/C4C,YAAAA,KAAK,CAACK,MAAN,CAAanB,oBAAb,CAAkCiF,IAAlC,CAAuC,MAAvC;AACAnE,YAAAA,KAAK,CAACK,MAAN,CAAalB,4BAAb,CAA0CgF,IAA1C,CAA+CtE,IAAI,CAACI,MAAL,CAAY0D,KAAZ,CAAkBvG,CAAlB,CAA/C;AACAoF,YAAAA,QAAQ,CAAC5G,YAAY,CAAC;AAAE+G,cAAAA,MAAM,EAAEc;AAAV,aAAD,CAAb,CAAR;AACH,WAJM,MAIA,IAAI5D,IAAI,CAACI,MAAL,CAAYR,MAAZ,CAAmBrC,CAAnB,KAAyB,cAA7B,EAA4C;AAC/C4C,YAAAA,KAAK,CAACK,MAAN,CAAavB,oBAAb,CAAkCqF,IAAlC,CAAuC,MAAvC;AACAnE,YAAAA,KAAK,CAACK,MAAN,CAAatB,4BAAb,CAA0CoF,IAA1C,CAA+CtE,IAAI,CAACI,MAAL,CAAY0D,KAAZ,CAAkBvG,CAAlB,CAA/C;AACAoF,YAAAA,QAAQ,CAAC5G,YAAY,CAAC;AAAE+G,cAAAA,MAAM,EAAEc;AAAV,aAAD,CAAb,CAAR;AACH,WAJM,MAIA,IAAI5D,IAAI,CAACI,MAAL,CAAYR,MAAZ,CAAmBrC,CAAnB,KAAyB,QAA7B,EAAsC;AACzC4C,YAAAA,KAAK,CAACK,MAAN,CAAayD,MAAb,IAAuBjE,IAAI,CAACI,MAAL,CAAY0D,KAAZ,CAAkBvG,CAAlB,CAAvB;AACAoF,YAAAA,QAAQ,CAAC5G,YAAY,CAAC;AAAE+G,cAAAA,MAAM,EAAEc;AAAV,aAAD,CAAb,CAAR;AACH;AAEJ,SA7BK,MA6BC,IAAI5D,IAAI,CAACI,MAAL,CAAYZ,MAAZ,CAAmBjC,CAAnB,KAAyB,YAA7B,EAA0C;AAC7CoF,UAAAA,QAAQ,CAAC5G,YAAY,CAAC;AAAE+G,YAAAA,MAAM,EAAEc;AAAV,WAAD,CAAb,CAAR;AACH,SAFM,MAED,CACF;AACH;AACJ;;AAEDjB,MAAAA,QAAQ,CAACxG,eAAe,CAACuG,SAAD,CAAhB,CAAR;AAEH,KA5ED,MA4EK;AACDS,MAAAA,UAAU,CAACO,GAAX,GAAiB5H,SAAjB;AACAqH,MAAAA,UAAU,CAACQ,IAAX;AACA/B,MAAAA,SAAS,CAACzB,KAAD,EAAQ0B,YAAR,EAAsBQ,QAAtB,EAAgCkB,UAAhC,EAA4ChB,SAA5C,EAAuDD,UAAvD,CAAT;AACH;AACJ,GArFD,MAqFO;AACHa,IAAAA,UAAU,CAACO,GAAX,GAAiB5H,SAAjB;AACAqH,IAAAA,UAAU,CAACQ,IAAX;AACAzB,IAAAA,cAAc,CAACsB,UAAD,CAAd;AACH;AAGJ,CAlHM","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { updateMonster } from './monster';\n\nimport { logCombat } from './combat';\n\n// sounds clips\nimport cardSuccess from '../sound_clips/play_card_zapsplat_foley.mp3';\nimport cardError from '../sound_clips/error_sound.mp3';\n\n// Alter Health, Energy & Defense Actions:\nexport const updatePlayer = createAction('player/UPDATE_PLAYER');\n\n// Deck Actions:\nexport const setDeck = createAction('player/SET_DECK');\nexport const drawCard = createAction('player/DRAW_CARD');\nexport const playCard = createAction('player/PLAY_CARD');\n\nexport const playIndexedCard = createAction('player/PLAY_INDEXED_CARD');\nexport const discardHand = createAction('player/DISCARD_HAND');\n\nexport const voidCard = createAction('player/VOID_CARD');\nexport const shuffleDeck = createAction('player/SHUFFLE_DECK');\nexport const resetDeck = createAction('player/RESET_DECK');\n\n// Hand actions\nexport const drawHand = createAction('player/DRAW_HAND');\n\n// deck altering\nexport const addCard = createAction('player/ADD_CARD');\nexport const addCardDiscard = createAction('player/ADD_CARD_DISCARD');\n\n// Ailgment\nexport const removeAilgments = createAction('player/REMOVE_AILGMENTS');\nexport const addAilgments = createAction('player/ADD_AILGMENTS');\n\n// Curses\nexport const removeCurses = createAction('player/REMOVE_CURSES');\n\n// Afflictions\nexport const removeDeckAfflictions = createAction('player/REMOVE_DECK_AFFLICTIONS');\n\nconst initialState = {\n    deck: [],\n    hand: [],\n    discard: [],\n    voidDeck: []\n}\n\n\nfunction shuffle(deck) {\n    var j, x, i\n    for (i = deck.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1))\n        x = deck[i]\n        deck[i] = deck[j]\n        deck[j] = x\n    }\n    return deck\n}\nconst reduceResetDeck = ({ deck, hand, discard, voidDeck, ...rest }) => {\n    let resetDeck = [...deck, ...hand, ...discard, ...voidDeck];\n    console.log('reset deck:', resetDeck);\n    return { ...rest, deck: resetDeck, hand:[], voidDeck:[], discard:[] }\n}\nconst reduceDrawCard = ({ discard, deck, hand, ...rest }) => {\n    if ( deck.length == 0 ){\n        if ( discard.length == 0 ){\n            return { ...rest, discard, deck, hand}\n        } else {\n            const shuffledDiscard = shuffle(discard)\n            const grabCard = shuffledDiscard[shuffledDiscard.length-1]\n            const newDeck = shuffledDiscard.slice(0, shuffledDiscard.length-1)        \n            const newHand = [...hand, grabCard]\n            return { ...rest, hand: newHand, deck: newDeck, discard: [] }\n        }\n    } else {\n        return { ...rest, hand: [...hand, deck[deck.length-1]], deck: deck.slice( 0, deck.length -1), discard }\n    }\n}\nconst reducePlayCard = ({ discard, hand, ...rest }) => {\n    const emptyHand = hand.length < 1;\n    \n    if (!emptyHand){\n        const newHand =  hand.slice( 0, hand.length-1)\n        const newDiscard = [...discard, hand[hand.length-1] ]\n        return { ...rest, hand: newHand, discard: newDiscard}\n    }else{\n        return { ...rest, hand, discard}\n    }\n}\nconst reducePlayIndexedCard = ({ voidDeck, discard, hand, ...rest } , {payload}) => {\n    const grabCard = hand[payload]\n    hand.splice(payload, 1)\n\n    if(grabCard.exhaust){\n        return { ...rest, voidDeck: [...voidDeck, grabCard], hand: hand, discard: discard}\n    }else{\n        return { ...rest, voidDeck: voidDeck, hand: hand, discard: [...discard, grabCard]}\n    }\n}\nconst reduceDiscardHand = ({ discard, hand, ...rest }) => {\n    const emptyHand = hand.length < 1;\n\n    if (!emptyHand){\n        const newHand = []\n        const newDiscard = [...discard, ...hand ]\n        return { ...rest, hand: newHand, discard: newDiscard}\n    }else{\n        return { ...rest, hand, discard}\n    }\n}\nconst reduceAddCard = ({ deck, ...rest }, {payload}) => {\n    const newDeck = [...deck, payload]\n    return { ...rest, deck: newDeck }\n}\nconst reduceAddCardDiscard = ({discard, ...rest}, {payload}) => {\n    const newDiscard = [...discard, payload]\n    return { ...rest, discard: newDiscard }\n}\nconst reduceAddAilgments = ({offenseHeroAilgments, offenseHeroAilgmentsDuration, utilityHeroAilgments, utilityHeroAilgmentsDuration, defenseHeroAilgments, defenseHeroAilgmentsDuration, ...rest}, {payload}) => {\n\n    console.log(\"Ailgments Payload:\",payload)\n\n    let indexOfStun = -1;\n\n    switch (payload.target) {\n\n        case 'mage':\n            indexOfStun = utilityHeroAilgments.findIndex( aligment => aligment == \"stun\" )\n            if ( indexOfStun != -1 ){\n                utilityHeroAilgmentsDuration[indexOfStun] =  utilityHeroAilgmentsDuration[indexOfStun] + payload.duration;\n            }else{\n                utilityHeroAilgments = [...utilityHeroAilgments, payload.effect]\n                utilityHeroAilgmentsDuration = [...utilityHeroAilgmentsDuration, payload.duration]\n            }\n            break;\n        case 'sword':\n            indexOfStun = offenseHeroAilgments.findIndex( aligment => aligment == \"stun\" );\n            if ( indexOfStun != -1 ){\n                offenseHeroAilgmentsDuration[indexOfStun] =  offenseHeroAilgmentsDuration[indexOfStun] + payload.duration;\n            }else{\n                offenseHeroAilgments = [...offenseHeroAilgments, payload.effect]\n                offenseHeroAilgmentsDuration = [...offenseHeroAilgmentsDuration, payload.duration]\n            }\n            break;\n        case 'shield':\n            indexOfStun = defenseHeroAilgments.findIndex( aligment => aligment == \"stun\" )\n            if ( indexOfStun != -1 ){\n                defenseHeroAilgmentsDuration[indexOfStun] =  defenseHeroAilgmentsDuration[indexOfStun] + payload.duration;\n            }else{\n                defenseHeroAilgments = [...defenseHeroAilgments, payload.effect]\n                defenseHeroAilgmentsDuration = [...defenseHeroAilgmentsDuration, payload.duration]\n            }\n            break;\n        default:\n            console.log('ERROR default::',payload.target)\n\n    }\n    return { ...rest, offenseHeroAilgments: offenseHeroAilgments, offenseHeroAilgmentsDuration: offenseHeroAilgmentsDuration, utilityHeroAilgments: utilityHeroAilgments, utilityHeroAilgmentsDuration: utilityHeroAilgmentsDuration, defenseHeroAilgments: defenseHeroAilgments, defenseHeroAilgmentsDuration: defenseHeroAilgmentsDuration }\n}\nconst reduceRemoveAilgments = ({offenseHeroAilgments, offenseHeroAilgmentsDuration, utilityHeroAilgments, utilityHeroAilgmentsDuration, defenseHeroAilgments, defenseHeroAilgmentsDuration, ...rest}) => {\n    return { ...rest, offenseHeroAilgments: [], offenseHeroAilgmentsDuration: [], utilityHeroAilgments: [], utilityHeroAilgmentsDuration: [], defenseHeroAilgments: [], defenseHeroAilgmentsDuration: [] }\n}\nconst reduceRemoveDeckAfflictions = ({ deck, hand, discard, ...rest}) => {\n    let newDeck = deck.filter( card => {\n        if ( !(card.type === 'affliction') ){\n            return card\n        }\n    })\n    let newHand = hand.filter( card => {\n        if ( !(card.type === 'affliction') ){\n            return card\n        }\n    })\n    let newDiscard = discard.filter( card => {\n        if ( !(card.type === 'affliction') ){\n            return card\n        }\n    })\n\n    return {...rest, deck : newDeck, hand: newHand, discard: newDiscard}\n}\nconst reduceRemoveCurses = ({deck, ...rest}) => {\n    let newDeck = deck.filter( card => {\n        if ( !(card.type == 'curse') ){\n            return card\n        }\n    })\n\n    return {...rest, deck : newDeck}\n}\n\n\nexport default handleActions({\n    [drawHand]: (state) => ({...state, deck: state.deck.slice( 0, state.deck.length -5), hand: [...state.hand, ...state.deck.slice(-5)]}),\n    [shuffleDeck]: (state) => ({...state, deck: shuffle(state.deck)}),\n    [updatePlayer]: (state, action) => ({ ...state, ...action.payload }),\n    [setDeck]: (state, action) => ({...state, deck: action.payload }),\n    \n    [resetDeck]: reduceResetDeck,\n    [removeAilgments]: reduceRemoveAilgments,\n    [addAilgments]: reduceAddAilgments,\n\n    [removeDeckAfflictions]: reduceRemoveDeckAfflictions,\n    [removeCurses]: reduceRemoveCurses,\n\n    [drawCard]: reduceDrawCard,\n    [playCard]: reducePlayCard,\n    \n    [playIndexedCard]: reducePlayIndexedCard,\n    [discardHand]: reduceDiscardHand,\n\n    [addCard]: reduceAddCard,\n    [addCardDiscard]: reduceAddCardDiscard,\n\n    [voidCard]: (state, action) => ({...state, hand: state.hand.slice(action.payload, 1), voidPile: [...state.void, state.hand.slice(action.payload, 1)]}),\n}, initialState);\n\n\nconst selectPlayer = createSelector(\n    state => state.player,\n    player => player   \n)\n\nexport const usePlayer = () => useSelector(selectPlayer);\n\n\n/* requiredHero :\n// a - any hero standing\n// o - off needed\n// u - util needed\n// d - def needed\n// do - def & off needed\n// ud - util & def needed\n// ou - off & util needed\n// e - every hero needed\n*/\nfunction checkStanding(state, requiredHeros){\n\n    const offHeroStanding = ((state.player.offenseHeroStatus === 'standing' && !state.player.offenseHeroAilgments.includes('stun') ) ? true : false);\n    const defHeroStanding = ((state.player.defenseHeroStatus === 'standing' && !state.player.defenseHeroAilgments.includes('stun') ) ? true : false);\n    const utilHeroStanding = ((state.player.utilityHeroStatus === 'standing' && !state.player.utilityHeroAilgments.includes('stun') ) ? true : false);\n\n    switch (requiredHeros) {\n        case 'a':\n            return (offHeroStanding || defHeroStanding || utilHeroStanding);\n        case 'o':\n            return (offHeroStanding);\n        case 'u':\n            return (utilHeroStanding);\n        case 'd':\n            return (defHeroStanding);\n        case 'do':\n            return (defHeroStanding && offHeroStanding);\n        case 'du':\n            return (defHeroStanding && utilHeroStanding);\n        case 'ou':\n            return (offHeroStanding && utilHeroStanding);\n        case 'e':\n            return (offHeroStanding && defHeroStanding && utilHeroStanding);\n    }\n}\n\n// Animations START:\nfunction heroStrikeAnimation(heroElement){\n    let transitionTime = 500;\n    heroElement.animate([\n        {transform: 'translate(0px,0px)'},\n        {transform: 'translate(95px, 0px)'},\n        {transform: 'translate(155px, 0px)'},\n        {transform: 'translate(-1px, 0px)'},\n        {transform: 'translate(0, 0px)'}\n\n    ], {\n        duration: transitionTime,\n        iterations: 1\n    });\n}\n\nfunction damageFlash(bodyElement){\n    let transitionTime = 500;\n    bodyElement.animate([\n        {opacity: 1},\n        {opacity: 0},\n        {opacity: .75},\n        {opacity: .5},\n        {opacity: 0},\n        {opacity: .75},\n        {opacity: 1}\n\n    ], {\n        duration: transitionTime,\n        iterations: 1\n    });\n}\n\nfunction shakeHero(state, requiredHero, mage, koMage, sword, shield){\n\n    const offHeroStanding = ((state.player.offenseHeroStatus === 'standing' && !state.player.offenseHeroAilgments.includes('stun') ) ? true : false);\n    const defHeroStanding = ((state.player.defenseHeroStatus === 'standing' && !state.player.defenseHeroAilgments.includes('stun') ) ? true : false);\n    const utilHeroStanding = ((state.player.utilityHeroStatus === 'standing' && !state.player.utilityHeroAilgments.includes('stun') ) ? true : false);\n\n    switch (requiredHero) {\n        case 'o':\n            leftRightShake(sword);\n            break;\n        case 'u':\n            leftRightShake(mage);\n            leftRightShake(koMage);\n            break;\n        case 'd':\n            leftRightShake(shield);\n            break;\n        case 'do':\n            if (!defHeroStanding){\n                leftRightShake(shield);\n            }\n            if (!offHeroStanding){\n                leftRightShake(sword);\n            }\n            break;\n        case 'du':\n            if (!defHeroStanding){\n                leftRightShake(shield);\n            }\n            if (!utilHeroStanding){\n                leftRightShake(mage);\n                leftRightShake(koMage)\n            }\n            break;\n        case 'ou':\n            if (!offHeroStanding){\n                leftRightShake(sword);\n            }\n            if (!utilHeroStanding){\n                leftRightShake(mage);\n                leftRightShake(koMage)\n            }\n            break;\n        case 'e':\n            if (!offHeroStanding){\n                leftRightShake(sword);\n            }\n            if (!defHeroStanding){\n                leftRightShake(shield);\n            }\n            if (!utilHeroStanding){\n                leftRightShake(mage);\n                leftRightShake(koMage)\n            }\n            break;\n    }\n}\n\nfunction leftRightShake(element){\n    let transitionTime = 250;\n    element.animate([\n        {transform: 'translate(0px,0px)'},\n        {transform: 'translate(10px, 0px)'},\n        {transform: 'translate(-10px, 0px)'},\n        {transform: 'translate(0, 0px)'}\n    ], {\n        duration: transitionTime,\n        iterations: 1\n    });\n}\n\n// Animations END\nfunction moveHero(requiredHeros, mageBody, shieldBody, swordBody){\n    switch (requiredHeros) {\n        case 'a':\n            let choice = Math.floor(Math.random() * 3); \n            if (choice === 1) {\n                heroStrikeAnimation(swordBody);\n            }else if( choice === 2){\n                heroStrikeAnimation(shieldBody);\n            }else{\n                heroStrikeAnimation(mageBody);\n            }\n            break;\n        case 'o':\n            heroStrikeAnimation(swordBody);\n            break;\n        case 'u':\n            heroStrikeAnimation(mageBody);\n            break;\n        case 'd':\n            heroStrikeAnimation(shieldBody);\n            break;\n        case 'do':\n            heroStrikeAnimation(swordBody);\n            heroStrikeAnimation(shieldBody);\n            break;\n        case 'du':\n            heroStrikeAnimation(shieldBody);\n            heroStrikeAnimation(mageBody);\n            break;\n        case 'ou':\n            heroStrikeAnimation(swordBody);\n            heroStrikeAnimation(mageBody);\n            break;\n        case 'e':\n            heroStrikeAnimation(swordBody);\n            heroStrikeAnimation(shieldBody);\n            heroStrikeAnimation(mageBody);\n            break;\n    }\n}\n\n// Async Actions\nexport const applyCard = (cardIndex) => (dispatch, getState) => {\n    const state = getState();\n\n    const card = state.player.hand[cardIndex]\n    const energyCost = card.energy;\n\n    const requiredHero = card.requiredHero;\n    const standing = checkStanding(state, requiredHero);     \n    const foeDefense = state.monster.defense\n\n    let cardSounds = document.createElement('audio');\n\n    let mageBody = document.getElementById('mageBody');\n    let koMageBody = document.getElementById('koMageBody');\n    let shieldBody = document.getElementById('shieldBody');\n    let swordBody = document.getElementById('swordBody');\n\n    let energyText = document.getElementById('heroEnergyText');\n\n    let aCursedCard = card.type === 'curse' ? true : false;\n\n\n    if (energyCost <= state.player.energy && !aCursedCard) {\n        cardSounds.src = cardSuccess;\n        cardSounds.play();\n\n        if (standing){\n        \n            moveHero(card.requiredHero, mageBody, shieldBody, swordBody);\n            const newEnergy = state.player.energy - energyCost\n\n            for (let i = 0; i < card.action.target.length; i++) {\n\n                if (card.action.target[i] == \"foe\"){\n                    if (card.action.effect[i] == 'damage'){\n                        damageFlash(document.getElementById('monsterOuterContainer'))\n                        const trample = foeDefense - card.action.power[i];\n                        if (trample < 0) {\n                            const newFoeHealth = parseInt(state.monster.health) + parseInt(trample);\n                            dispatch(updateMonster({ health: newFoeHealth, defense: 0}));\n                            dispatch(logCombat({ origin: 'player', description: ('Player used: '+card.name+' dealing '+((-1)*(trample))+' damage.' ) }))\n                        }else{\n                            const newFoeDefense = trample;\n                            dispatch(updateMonster({ defense: newFoeDefense }));\n                            dispatch(logCombat({ origin: 'player', description: ('Player used: '+card.name+' dealing 0 damage.' ) }))\n                        }\n                        dispatch(updatePlayer({ energy: newEnergy }));\n                    }else if (card.action.effect[i] == 'stun'){\n                        state.monster.aligment.push('stun');\n                        state.monster.aligmentDuration.push(card.action.power[i]);\n                        dispatch(updatePlayer({ energy: newEnergy }))\n                    }else if (card.action.effect[i] == 'defenseTotal'){\n                        const trample = foeDefense - state.player.defense;\n                        if (trample < 0) {\n                            const newFoeHealth = parseInt(state.monster.health) + parseInt(trample);\n                            dispatch(updateMonster({ health: newFoeHealth, defense: 0}));\n                            dispatch(logCombat({ origin: 'player', description: ('Player used: '+card.name+' dealing '+((-1)*(trample))+' damage.' ) }))\n                        }else{\n                            const newFoeDefense = trample;\n                            dispatch(updateMonster({ defense: newFoeDefense }));\n                            dispatch(logCombat({ origin: 'player', description: ('Player used: '+card.name+' dealing 0 damage.' ) }))\n                        }\n                        dispatch(updatePlayer({ energy: newEnergy }))\n                    }\n                }else if (card.action.target[i] == \"player\"){\n                    if (card.action.effect[i]==\"heal\"){\n                        const newPlayerHealth = ( parseInt(state.player.health) + parseInt(card.action.power[i]) ) > parseInt(state.player.maxHealth) ? (parseInt(state.player.maxHealth)) : (parseInt(state.player.health) + parseInt(card.action.power[i]));\n                        dispatch(updatePlayer({ health: newPlayerHealth, energy: newEnergy }))\n                        dispatch(logCombat({ origin: 'player', description: ('Player used: '+card.name+' healing '+card.action.power[i]+' party health' ) }))\n                    }else if (card.action.effect[i] == \"mend\"){\n                        dispatch(removeDeckAfflictions()); \n                    } else if (card.action.effect[i] == \"defense\"){\n                        const defense = card.action.power[i]\n                        const newPlayerDefense = parseInt(state.player.defense) + parseInt(defense)\n                        dispatch(updatePlayer({ defense: newPlayerDefense, energy: newEnergy}))\n                        dispatch(logCombat({ origin: 'player', description: ('Player used: '+card.name+' gaining '+defense+' party defense' ) }))\n                    } else if (card.action.effect[i] == 'delayUtility'){\n                        state.player.utilityHeroAilgments.push('stun')\n                        state.player.utilityHeroAilgmentsDuration.push(card.action.power[i])\n                        dispatch(updatePlayer({ energy: newEnergy }))\n                    } else if (card.action.effect[i] == 'delayDefense'){\n                        state.player.defenseHeroAilgments.push('stun')\n                        state.player.defenseHeroAilgmentsDuration.push(card.action.power[i])\n                        dispatch(updatePlayer({ energy: newEnergy }))\n                    } else if (card.action.effect[i] == 'delayOffense'){\n                        state.player.offenseHeroAilgments.push('stun')\n                        state.player.offenseHeroAilgmentsDuration.push(card.action.power[i])\n                        dispatch(updatePlayer({ energy: newEnergy }))\n                    } else if (card.action.effect[i] == 'damage'){\n                        state.player.health -= card.action.power[i]\n                        dispatch(updatePlayer({ energy: newEnergy }))\n                    }\n\n                } else if (card.action.target[i] == \"affliction\"){\n                    dispatch(updatePlayer({ energy: newEnergy }))\n                } else{\n                    // something\n                }\n            }\n\n            dispatch(playIndexedCard(cardIndex))\n\n        }else{\n            cardSounds.src = cardError;\n            cardSounds.play();\n            shakeHero(state, requiredHero, mageBody, koMageBody, swordBody, shieldBody )\n        }\n    } else {\n        cardSounds.src = cardError;\n        cardSounds.play();\n        leftRightShake(energyText);\n    }\n\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}