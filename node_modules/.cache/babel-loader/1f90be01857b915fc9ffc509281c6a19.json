{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { cards } from \"../game-data/card-data\";\nimport { rest } from \"lodash\";\nexport const updateShop = createAction('shop/UPDATE_SHOP');\nexport const setupShop = createAction('shop/SETUP_SHOP');\nexport const boughtCard = createAction('shop/BOUGHT_CARD');\nconst initialState = {\n  shopCards: []\n};\n\nfunction rollDice(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nconst reduceSetUpShop = _ref => {\n  let {\n    shopCards,\n    ...rest\n  } = _ref;\n  let newShopCards = [...shopCards, cards[rollDice(3, cards.length)], cards[rollDice(3, cards.length)]];\n  return { ...rest,\n    shopCards: newShopCards\n  };\n};\n\nconst reduceBoughtCard = (_ref2, _ref3) => {\n  let {\n    shopCards\n  } = _ref2;\n  let {\n    payload\n  } = _ref3;\n  shopCards.splice(payload, 1);\n  return { ...rest,\n    shopCards: shopCards\n  };\n};\n\nexport default handleActions({\n  [updateShop]: (state, action) => ({ ...state,\n    ...action.payload\n  }),\n  [setupShop]: reduceSetUpShop,\n  [boughtCard]: reduceBoughtCard\n}, initialState);\nconst selectShop = createSelector(state => state.shop, shop => shop);\nexport const useShop = () => {\n  _s();\n\n  return useSelector(selectShop);\n};\n\n_s(useShop, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"sources":["/Users/uwu/Documents/Dev/weather-app/src/ducks/shop.js"],"names":["createAction","handleActions","useSelector","createSelector","cards","rest","updateShop","setupShop","boughtCard","initialState","shopCards","rollDice","min","max","Math","ceil","floor","random","reduceSetUpShop","newShopCards","length","reduceBoughtCard","payload","splice","state","action","selectShop","shop","useShop"],"mappings":";;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,UAA/B;AAEA,SAAQC,KAAR,QAAoB,wBAApB;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,OAAO,MAAMC,UAAU,GAAGN,YAAY,CAAC,kBAAD,CAA/B;AACP,OAAO,MAAMO,SAAS,GAAGP,YAAY,CAAC,iBAAD,CAA9B;AACP,OAAO,MAAMQ,UAAU,GAAGR,YAAY,CAAC,kBAAD,CAA/B;AAEP,MAAMS,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE;AADM,CAArB;;AAIA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AACxBD,EAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,EAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,SAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;AACH;;AAED,MAAMM,eAAe,GAAG,QAA2B;AAAA,MAA1B;AAAER,IAAAA,SAAF;AAAa,OAAGL;AAAhB,GAA0B;AAC/C,MAAIc,YAAY,GAAG,CAAC,GAAGT,SAAJ,EAAeN,KAAK,CAACO,QAAQ,CAAC,CAAD,EAAGP,KAAK,CAACgB,MAAT,CAAT,CAApB,EAAgDhB,KAAK,CAACO,QAAQ,CAAC,CAAD,EAAGP,KAAK,CAACgB,MAAT,CAAT,CAArD,CAAnB;AACA,SAAO,EAAE,GAAGf,IAAL;AAAWK,IAAAA,SAAS,EAAES;AAAtB,GAAP;AACH,CAHD;;AAKA,MAAME,gBAAgB,GAAG,kBAA4B;AAAA,MAA3B;AAACX,IAAAA;AAAD,GAA2B;AAAA,MAAd;AAACY,IAAAA;AAAD,GAAc;AACjDZ,EAAAA,SAAS,CAACa,MAAV,CAAiBD,OAAjB,EAA0B,CAA1B;AACA,SAAO,EAAC,GAAGjB,IAAJ;AAAUK,IAAAA,SAAS,EAAEA;AAArB,GAAP;AACH,CAHD;;AAKA,eAAeT,aAAa,CAAC;AACzB,GAACK,UAAD,GAAc,CAACkB,KAAD,EAAQC,MAAR,MAAoB,EAAE,GAAGD,KAAL;AAAY,OAAGC,MAAM,CAACH;AAAtB,GAApB,CADW;AAEzB,GAACf,SAAD,GAAaW,eAFY;AAGzB,GAACV,UAAD,GAAca;AAHW,CAAD,EAIzBZ,YAJyB,CAA5B;AAOA,MAAMiB,UAAU,GAAGvB,cAAc,CAC7BqB,KAAK,IAAIA,KAAK,CAACG,IADc,EAE7BA,IAAI,IAAIA,IAFqB,CAAjC;AAKA,OAAO,MAAMC,OAAO,GAAG;AAAA;;AAAA,SAAM1B,WAAW,CAACwB,UAAD,CAAjB;AAAA,CAAhB;;GAAME,O;UAAgB1B,W","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nimport {cards} from \"../game-data/card-data\"\nimport { rest } from \"lodash\";\n\nexport const updateShop = createAction('shop/UPDATE_SHOP');\nexport const setupShop = createAction('shop/SETUP_SHOP');\nexport const boughtCard = createAction('shop/BOUGHT_CARD');\n\nconst initialState = {\n    shopCards: []\n}\n\nfunction rollDice(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; \n}\n\nconst reduceSetUpShop = ({ shopCards, ...rest}) => {\n    let newShopCards = [...shopCards, cards[rollDice(3,cards.length)], cards[rollDice(3,cards.length)]]\n    return { ...rest, shopCards: newShopCards}\n}\n\nconst reduceBoughtCard = ({shopCards}, {payload}) => {\n    shopCards.splice(payload, 1)\n    return {...rest, shopCards: shopCards}\n}\n\nexport default handleActions({\n    [updateShop]: (state, action) => ({ ...state, ...action.payload }), \n    [setupShop]: reduceSetUpShop,\n    [boughtCard]: reduceBoughtCard,\n}, initialState);\n\n\nconst selectShop = createSelector(\n    state => state.shop,\n    shop => shop   \n)\n\nexport const useShop = () => useSelector(selectShop);\n\n\n"]},"metadata":{},"sourceType":"module"}