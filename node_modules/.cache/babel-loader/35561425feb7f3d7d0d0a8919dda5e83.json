{"ast":null,"code":"// import { createAction, handleActions } from \"redux-actions\";\n// import { useSelector } from \"react-redux\";\n// import { createSelector } from \"reselect\";\n// import {cards} from \"../game-data/card-data\"\n// export const updateGameState = createAction('game_state/UPDATE_GAME_STATE');\n// export const resolutionCards = createAction('game_state/RESOLUTION_CARDS');\n// const initialState = {\n//     screen: 'title',\n//     defeat: false,\n//     floor: 0,\n//     playerScore: 0,\n//     resolutionCards: [],\n//     floorComplete: false\n// }\n// function getRandomRange(min, max) {\n//     return Math.floor(Math.random() * (max - min) + min);\n// }\n// const reduceResolutionCards = ({ resolutionCards, ...rest}) => {\n//     let newResolutionCards = [...resolutionCards, cards[getRandomRange(3,cards.length)], cards[getRandomRange(3,cards.length)] ]\n//     return { ...rest, resolutionCards: newResolutionCards}\n// }\n// export default handleActions({\n//     [updateGameState]: (state, action) => ({ ...state, ...action.payload }),\n//     [resolutionCards]: reduceResolutionCards,\n// }, initialState);\n// const selectGameState = createSelector(\n//     state => state.game_state,\n//     game_state => game_state   \n// )\n// export const useGameState = () => useSelector(selectGameState);","map":{"version":3,"sources":["/Users/uwu/Documents/Dev/weather-app/src/ducks/game_state.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { createAction, handleActions } from \"redux-actions\";\n// import { useSelector } from \"react-redux\";\n// import { createSelector } from \"reselect\";\n// import {cards} from \"../game-data/card-data\"\n\n// export const updateGameState = createAction('game_state/UPDATE_GAME_STATE');\n// export const resolutionCards = createAction('game_state/RESOLUTION_CARDS');\n\n// const initialState = {\n//     screen: 'title',\n//     defeat: false,\n//     floor: 0,\n//     playerScore: 0,\n//     resolutionCards: [],\n//     floorComplete: false\n// }\n\n// function getRandomRange(min, max) {\n//     return Math.floor(Math.random() * (max - min) + min);\n// }\n\n// const reduceResolutionCards = ({ resolutionCards, ...rest}) => {\n//     let newResolutionCards = [...resolutionCards, cards[getRandomRange(3,cards.length)], cards[getRandomRange(3,cards.length)] ]\n//     return { ...rest, resolutionCards: newResolutionCards}\n// }\n\n\n// export default handleActions({\n//     [updateGameState]: (state, action) => ({ ...state, ...action.payload }),\n//     [resolutionCards]: reduceResolutionCards,\n// }, initialState);\n\n\n// const selectGameState = createSelector(\n//     state => state.game_state,\n//     game_state => game_state   \n// )\n\n// export const useGameState = () => useSelector(selectGameState);\n\n\n"]},"metadata":{},"sourceType":"module"}