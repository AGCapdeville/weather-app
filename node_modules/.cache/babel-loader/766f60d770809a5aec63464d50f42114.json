{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { cards } from \"../game-data/card-data\";\nexport const updateGameState = createAction('game_state/UPDATE_GAME_STATE');\nexport const resolutionCards = createAction('game_state/RESOLUTION_CARDS');\nconst initialState = {\n  screen: 'title',\n  defeat: false,\n  floor: 0,\n  playerScore: 0,\n  resolutionCards: [],\n  floorComplete: false\n};\n\nfunction getRandomRange(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst reduceResolutionCards = _ref => {\n  let {\n    resolutionCards,\n    ...rest\n  } = _ref;\n  let newResolutionCards = [...resolutionCards, cards[getRandomRange(3, cards.length)], cards[getRandomRange(3, cards.length)]];\n  return { ...rest,\n    resolutionCards: newResolutionCards\n  };\n};\n\nexport default handleActions({\n  [updateGameState]: (state, action) => ({ ...state,\n    ...action.payload\n  }),\n  [resolutionCards]: reduceResolutionCards\n}, initialState);\nconst selectGameState = createSelector(state => state.game_state, game_state => game_state);\nexport const useGameState = () => {\n  _s();\n\n  return useSelector(selectGameState);\n};\n\n_s(useGameState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"sources":["/Users/uwu/Documents/Dev/weather-app/src/ducks/game_state.js"],"names":["createAction","handleActions","useSelector","createSelector","cards","updateGameState","resolutionCards","initialState","screen","defeat","floor","playerScore","floorComplete","getRandomRange","min","max","Math","random","reduceResolutionCards","rest","newResolutionCards","length","state","action","payload","selectGameState","game_state","useGameState"],"mappings":";;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAAQC,KAAR,QAAoB,wBAApB;AAEA,OAAO,MAAMC,eAAe,GAAGL,YAAY,CAAC,8BAAD,CAApC;AACP,OAAO,MAAMM,eAAe,GAAGN,YAAY,CAAC,6BAAD,CAApC;AAEP,MAAMO,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,OADS;AAEjBC,EAAAA,MAAM,EAAE,KAFS;AAGjBC,EAAAA,KAAK,EAAE,CAHU;AAIjBC,EAAAA,WAAW,EAAE,CAJI;AAKjBL,EAAAA,eAAe,EAAE,EALA;AAMjBM,EAAAA,aAAa,EAAE;AANE,CAArB;;AASA,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkC;AAC9B,SAAOC,IAAI,CAACN,KAAL,CAAWM,IAAI,CAACC,MAAL,MAAiBF,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAP;AACH;;AAED,MAAMI,qBAAqB,GAAG,QAAiC;AAAA,MAAhC;AAAEZ,IAAAA,eAAF;AAAmB,OAAGa;AAAtB,GAAgC;AAC3D,MAAIC,kBAAkB,GAAG,CAAC,GAAGd,eAAJ,EAAqBF,KAAK,CAACS,cAAc,CAAC,CAAD,EAAGT,KAAK,CAACiB,MAAT,CAAf,CAA1B,EAA4DjB,KAAK,CAACS,cAAc,CAAC,CAAD,EAAGT,KAAK,CAACiB,MAAT,CAAf,CAAjE,CAAzB;AACA,SAAO,EAAE,GAAGF,IAAL;AAAWb,IAAAA,eAAe,EAAEc;AAA5B,GAAP;AACH,CAHD;;AAMA,eAAenB,aAAa,CAAC;AACzB,GAACI,eAAD,GAAmB,CAACiB,KAAD,EAAQC,MAAR,MAAoB,EAAE,GAAGD,KAAL;AAAY,OAAGC,MAAM,CAACC;AAAtB,GAApB,CADM;AAEzB,GAAClB,eAAD,GAAmBY;AAFM,CAAD,EAGzBX,YAHyB,CAA5B;AAMA,MAAMkB,eAAe,GAAGtB,cAAc,CAClCmB,KAAK,IAAIA,KAAK,CAACI,UADmB,EAElCA,UAAU,IAAIA,UAFoB,CAAtC;AAKA,OAAO,MAAMC,YAAY,GAAG;AAAA;;AAAA,SAAMzB,WAAW,CAACuB,eAAD,CAAjB;AAAA,CAArB;;GAAME,Y;UAAqBzB,W","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport {cards} from \"../game-data/card-data\"\n\nexport const updateGameState = createAction('game_state/UPDATE_GAME_STATE');\nexport const resolutionCards = createAction('game_state/RESOLUTION_CARDS');\n\nconst initialState = {\n    screen: 'title',\n    defeat: false,\n    floor: 0,\n    playerScore: 0,\n    resolutionCards: [],\n    floorComplete: false\n}\n\nfunction getRandomRange(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst reduceResolutionCards = ({ resolutionCards, ...rest}) => {\n    let newResolutionCards = [...resolutionCards, cards[getRandomRange(3,cards.length)], cards[getRandomRange(3,cards.length)] ]\n    return { ...rest, resolutionCards: newResolutionCards}\n}\n\n\nexport default handleActions({\n    [updateGameState]: (state, action) => ({ ...state, ...action.payload }),\n    [resolutionCards]: reduceResolutionCards,\n}, initialState);\n\n\nconst selectGameState = createSelector(\n    state => state.game_state,\n    game_state => game_state   \n)\n\nexport const useGameState = () => useSelector(selectGameState);\n\n\n"]},"metadata":{},"sourceType":"module"}